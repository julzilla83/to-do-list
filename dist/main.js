(()=>{"use strict";var e={519:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(559),a=t.n(r),o=t(476),i=t.n(o)()(a());i.push([e.id,'* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-size: large;\n}\n\nbody, html {\n    height: 100vh;\n    width: 100vw;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n\n.page-wrapper {\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: 150px auto;\n}\n\n.header {\n    display: flex;\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    align-self: center;\n    justify-self: center;\n    background-color: #0a2c48;\n    color: white;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.header h1 {\n    font-size: 3em;\n}\n\n.project-sidebar {\n    grid-row: 2 / 3;\n    min-width: 300px;\n    background-color: #0e406a;\n    color: #bdcbf3;\n    font-weight: 700;\n}\n\n.project-sidebar .add-proj-btn {\n    float: right;\n    padding: 0.25rem;\n    border-radius: 1rem;\n    margin-right: 2rem;\n    height: 2rem;\n    width: 2rem;\n    background-color: transparent;\n    cursor: pointer;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n    font-weight: 900;\n    border: 1px solid white;\n}\n\n.project-sidebar .add-proj-btn:focus{\n    outline: 0;\n}\n\n.project-sidebar .add-proj-btn:hover{\n    background-color: #54b3d6;\n}\n\n.project-list {\n    padding: 1rem 2rem;\n    list-style-type: none;\n}\n\n.project-list li {\n    margin: 1rem 1rem;\n    cursor: pointer;\n}\n\n.project-info {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    height: 5rem;\n    border-bottom: 4px solid #145a94;\n}\n\n.project-info .btn-container {\n    grid-column: 2 / 3;\n    grid-row: 1 / span 2;\n    align-self: center;\n    justify-self: end;\n    padding: 1rem 0;\n    display: flex;\n    gap: 0.3rem;\n    margin-right: 1rem;\n}\n\n.project-info .btn-container button {\n    padding: 2px 5px;\n    margin-left: 5px;\n}\n\n/* .project-info input[type=text] {\n    font-size: larger;\n} */\n\n.input-locked {\n    pointer-events: none;\n    border: 1px solid transparent;\n}\n\n.main {\n    grid-row: 2 / 3;\n    padding: 2rem;\n}\n\n.task-list-container {\n    grid-column: 1 / -1;\n}\n\n.task-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 10px;\n    border: 2px solid #54b3d6;\n    border-radius: 0.5rem;\n    margin: 1rem;\n    padding: 1rem 1rem 1rem 2rem;\n}\n\n.task-container:hover {\n    box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n    -webkit-box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n    -moz-box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n}\n\n.task-container button {\n    padding: 2px 5px;\n}\n\n.task-container .remaining {\n    width: 10rem;\n    margin: 0 1rem;\n}\n\n.due-date {\n    margin-left: auto;\n    width: 10rem;\n    margin: 0 1rem;\n}\n\n/* .priority {\n    text-transform: capitalize;\n} */\n\n/* .priority::before {\n    content: \'|\';\n    margin: 10px;\n} */\n\n.priority-level {\n    margin: 0 2rem 0 0;\n}\n\n.popup-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.25);\n    /* opacity: 0.7; */\n    z-index: 1;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n}\n\ninput, select {\n    border: 1px solid #145a94;\n    padding: 0.25rem;\n    background-color: transparent;\n}\n\n.newProjEntry, .newTaskEntry {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: white;\n    padding: 2rem;\n    border: 2px solid #145a94;\n    border-radius: 0.5rem;\n    box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n    -webkit-box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n    -moz-box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n}\n\n.newProjEntry label, .newTaskEntry label{\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\n.newProjEntry h3, .newTaskEntry h3 {\n    text-transform: uppercase;\n    margin: auto;\n    font-size: larger;\n    color: #145a94;\n}\n\n.newProjEntry .btn-container, .newTaskEntry .btn-container{\n    display: flex;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.newProjEntry button, .newTaskEntry button {\n    width: 4.3rem;\n    height: 2rem;\n    background-color: #0e406a;\n    color: white;\n    border: none;\n    text-transform: uppercase;\n    font-size: small;\n    font-weight: 700;\n    border-radius: 1rem;\n    cursor: pointer;\n}\n\n.newProjEntry .popup-addProj-btn:hover,\n.newTaskEntry .popup-addTask-btn:hover {\n    background-color: #4CAF50;\n}\n\n.newProjEntry .popup-cancelProj-btn:hover,\n.newTaskEntry .popup-cancelTask-btn:hover {\n    background-color: #f44336;\n}\n\n.newTaskEntry select {\n    margin: 0;\n}\n\n.newTaskEntry input[type="date"] {\n    margin: 0;\n}\n\n.hidden {\n    display: none;\n    z-index: -1;\n}\n\ninput[type="date"]::-webkit-inner-spin-button,\ninput[type="date"]::-webkit-calendar-picker-indicator {\n    display: none;\n    -webkit-appearance: none;\n}\n\ninput[type="date"]{\n    margin: 0 2rem 0 0;\n    font-size: large !important;\n}\n\n#priority-level {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    text-indent: 1px;\n    text-overflow: \'\';\n    width: 9ch;\n    background: none;\n}\n\n.target {\n    margin-left: auto;\n}\n\n/* checkbox\'s look */\n.checkbox-container {\n    position: relative;\n}\n  \n.checkbox-container label {\n    background-color: transparent;\n    border: 1px solid #ccc;\n    border-radius: 50%;\n    cursor: pointer;\n    height: 28px;\n    left: -15px;\n    position: absolute;\n    top: -3px;\n    width: 28px;\n}\n  \n.checkbox-container label:after {\n    border: 2px solid #fff;\n    border-top: none;\n    border-right: none;\n    content: "";\n    height: 6px;\n    left: 7px;\n    opacity: 0;\n    position: absolute;\n    top: 8px;\n    transform: rotate(-45deg);\n    width: 12px;\n}\n  \n.checkbox-container input[type="checkbox"] {\n    visibility: hidden;\n}\n  \n.checkbox-container input[type="checkbox"]:checked + label {\n    background-color: #66bb6a;\n    border-color: #66bb6a;\n}\n  \n.checkbox-container input[type="checkbox"]:checked + label:after {\n    opacity: 1;\n}\n/* checkbox\'s look - end */\n\n/* li animation */\nul > * {\n    padding: 0.5rem 0;\n}\n\nli {\n    background-image: linear-gradient(\n        to right,\n        white,\n        white 50%,\n        #73c0ff 50%\n    );\n    background-size: 200% 100%;\n    background-position: -100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    transition: all 0.3s ease-in-out;\n}\n\nli:before {\n    content: \'\';\n    background: #54b3d6;\n    display: block;\n    position: absolute;\n    bottom: -3px;\n    left: 0;\n    width: 0;\n    height: 3px;\n}\n\nli:hover {\n    background-position: 0;\n}\n\nli:hover::before {\n    width: 100%;\n}\n/* li animation -end */\n\n/* project info */\n.project-info {\n    margin: 1rem;\n    padding: 0 0 2rem 0;\n}\n\n.project-name {\n    text-transform: uppercase;\n    font-weight: 900;\n    color: #0a2c48 ;\n    font-size: x-large;\n}\n/* project info - end */\n\n/* edit and delete buttons */\n.project-info button, .task-container button {\n    height: 1.7rem;\n    border-radius: 1rem;\n    border: none;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: small;\n    cursor: pointer;\n    background-color: #145a94;\n    color: white;\n}\n\n.project-info .proj-edit-btn, .task-container .task-edit-btn {\n    width: 3rem;\n}\n\n.project-info .proj-edit-btn:hover, .task-container .task-edit-btn:hover {\n    background-color: #4CAF50;\n    width: 3rem;\n}\n\n.project-info .proj-del-btn, .task-container .task-delete-btn {\n    width: 4rem;\n}\n\n.project-info .proj-del-btn:hover, .task-container .task-delete-btn:hover {\n    background-color: #f44336;\n    width: 4rem;\n}\n\n.add-task-btn {\n    float: right;\n    padding: 0.25rem;\n    border-radius: 1rem;\n    margin-right: 1rem;\n    height: 2rem;\n    width: 2rem;\n    background-color: #145a94;\n    cursor: pointer;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n    font-weight: 900;\n    border: 0;\n}\n\n.add-task-btn:hover {\n    background-color: #54b3d6;\n}\n\n/* addTask, edit and delete buttons - end*/',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-size: large;\n}\n\nbody, html {\n    height: 100vh;\n    width: 100vw;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n\n.page-wrapper {\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: 150px auto;\n}\n\n.header {\n    display: flex;\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    align-self: center;\n    justify-self: center;\n    background-color: #0a2c48;\n    color: white;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.header h1 {\n    font-size: 3em;\n}\n\n.project-sidebar {\n    grid-row: 2 / 3;\n    min-width: 300px;\n    background-color: #0e406a;\n    color: #bdcbf3;\n    font-weight: 700;\n}\n\n.project-sidebar .add-proj-btn {\n    float: right;\n    padding: 0.25rem;\n    border-radius: 1rem;\n    margin-right: 2rem;\n    height: 2rem;\n    width: 2rem;\n    background-color: transparent;\n    cursor: pointer;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n    font-weight: 900;\n    border: 1px solid white;\n}\n\n.project-sidebar .add-proj-btn:focus{\n    outline: 0;\n}\n\n.project-sidebar .add-proj-btn:hover{\n    background-color: #54b3d6;\n}\n\n.project-list {\n    padding: 1rem 2rem;\n    list-style-type: none;\n}\n\n.project-list li {\n    margin: 1rem 1rem;\n    cursor: pointer;\n}\n\n.project-info {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    height: 5rem;\n    border-bottom: 4px solid #145a94;\n}\n\n.project-info .btn-container {\n    grid-column: 2 / 3;\n    grid-row: 1 / span 2;\n    align-self: center;\n    justify-self: end;\n    padding: 1rem 0;\n    display: flex;\n    gap: 0.3rem;\n    margin-right: 1rem;\n}\n\n.project-info .btn-container button {\n    padding: 2px 5px;\n    margin-left: 5px;\n}\n\n/* .project-info input[type=text] {\n    font-size: larger;\n} */\n\n.input-locked {\n    pointer-events: none;\n    border: 1px solid transparent;\n}\n\n.main {\n    grid-row: 2 / 3;\n    padding: 2rem;\n}\n\n.task-list-container {\n    grid-column: 1 / -1;\n}\n\n.task-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 10px;\n    border: 2px solid #54b3d6;\n    border-radius: 0.5rem;\n    margin: 1rem;\n    padding: 1rem 1rem 1rem 2rem;\n}\n\n.task-container:hover {\n    box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n    -webkit-box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n    -moz-box-shadow: 3px 8px 14px -10px rgba(0,0,0,0.52);\n}\n\n.task-container button {\n    padding: 2px 5px;\n}\n\n.task-container .remaining {\n    width: 10rem;\n    margin: 0 1rem;\n}\n\n.due-date {\n    margin-left: auto;\n    width: 10rem;\n    margin: 0 1rem;\n}\n\n/* .priority {\n    text-transform: capitalize;\n} */\n\n/* .priority::before {\n    content: \'|\';\n    margin: 10px;\n} */\n\n.priority-level {\n    margin: 0 2rem 0 0;\n}\n\n.popup-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.25);\n    /* opacity: 0.7; */\n    z-index: 1;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n}\n\ninput, select {\n    border: 1px solid #145a94;\n    padding: 0.25rem;\n    background-color: transparent;\n}\n\n.newProjEntry, .newTaskEntry {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: white;\n    padding: 2rem;\n    border: 2px solid #145a94;\n    border-radius: 0.5rem;\n    box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n    -webkit-box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n    -moz-box-shadow: 2px 10px 29px -10px rgba(0,0,0,0.75);\n}\n\n.newProjEntry label, .newTaskEntry label{\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\n.newProjEntry h3, .newTaskEntry h3 {\n    text-transform: uppercase;\n    margin: auto;\n    font-size: larger;\n    color: #145a94;\n}\n\n.newProjEntry .btn-container, .newTaskEntry .btn-container{\n    display: flex;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.newProjEntry button, .newTaskEntry button {\n    width: 4.3rem;\n    height: 2rem;\n    background-color: #0e406a;\n    color: white;\n    border: none;\n    text-transform: uppercase;\n    font-size: small;\n    font-weight: 700;\n    border-radius: 1rem;\n    cursor: pointer;\n}\n\n.newProjEntry .popup-addProj-btn:hover,\n.newTaskEntry .popup-addTask-btn:hover {\n    background-color: #4CAF50;\n}\n\n.newProjEntry .popup-cancelProj-btn:hover,\n.newTaskEntry .popup-cancelTask-btn:hover {\n    background-color: #f44336;\n}\n\n.newTaskEntry select {\n    margin: 0;\n}\n\n.newTaskEntry input[type="date"] {\n    margin: 0;\n}\n\n.hidden {\n    display: none;\n    z-index: -1;\n}\n\ninput[type="date"]::-webkit-inner-spin-button,\ninput[type="date"]::-webkit-calendar-picker-indicator {\n    display: none;\n    -webkit-appearance: none;\n}\n\ninput[type="date"]{\n    margin: 0 2rem 0 0;\n    font-size: large !important;\n}\n\n#priority-level {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    text-indent: 1px;\n    text-overflow: \'\';\n    width: 9ch;\n    background: none;\n}\n\n.target {\n    margin-left: auto;\n}\n\n/* checkbox\'s look */\n.checkbox-container {\n    position: relative;\n}\n  \n.checkbox-container label {\n    background-color: transparent;\n    border: 1px solid #ccc;\n    border-radius: 50%;\n    cursor: pointer;\n    height: 28px;\n    left: -15px;\n    position: absolute;\n    top: -3px;\n    width: 28px;\n}\n  \n.checkbox-container label:after {\n    border: 2px solid #fff;\n    border-top: none;\n    border-right: none;\n    content: "";\n    height: 6px;\n    left: 7px;\n    opacity: 0;\n    position: absolute;\n    top: 8px;\n    transform: rotate(-45deg);\n    width: 12px;\n}\n  \n.checkbox-container input[type="checkbox"] {\n    visibility: hidden;\n}\n  \n.checkbox-container input[type="checkbox"]:checked + label {\n    background-color: #66bb6a;\n    border-color: #66bb6a;\n}\n  \n.checkbox-container input[type="checkbox"]:checked + label:after {\n    opacity: 1;\n}\n/* checkbox\'s look - end */\n\n/* li animation */\nul > * {\n    padding: 0.5rem 0;\n}\n\nli {\n    background-image: linear-gradient(\n        to right,\n        white,\n        white 50%,\n        #73c0ff 50%\n    );\n    background-size: 200% 100%;\n    background-position: -100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    transition: all 0.3s ease-in-out;\n}\n\nli:before {\n    content: \'\';\n    background: #54b3d6;\n    display: block;\n    position: absolute;\n    bottom: -3px;\n    left: 0;\n    width: 0;\n    height: 3px;\n}\n\nli:hover {\n    background-position: 0;\n}\n\nli:hover::before {\n    width: 100%;\n}\n/* li animation -end */\n\n/* project info */\n.project-info {\n    margin: 1rem;\n    padding: 0 0 2rem 0;\n}\n\n.project-name {\n    text-transform: uppercase;\n    font-weight: 900;\n    color: #0a2c48 ;\n    font-size: x-large;\n}\n/* project info - end */\n\n/* edit and delete buttons */\n.project-info button, .task-container button {\n    height: 1.7rem;\n    border-radius: 1rem;\n    border: none;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: small;\n    cursor: pointer;\n    background-color: #145a94;\n    color: white;\n}\n\n.project-info .proj-edit-btn, .task-container .task-edit-btn {\n    width: 3rem;\n}\n\n.project-info .proj-edit-btn:hover, .task-container .task-edit-btn:hover {\n    background-color: #4CAF50;\n    width: 3rem;\n}\n\n.project-info .proj-del-btn, .task-container .task-delete-btn {\n    width: 4rem;\n}\n\n.project-info .proj-del-btn:hover, .task-container .task-delete-btn:hover {\n    background-color: #f44336;\n    width: 4rem;\n}\n\n.add-task-btn {\n    float: right;\n    padding: 0.25rem;\n    border-radius: 1rem;\n    margin-right: 1rem;\n    height: 2rem;\n    width: 2rem;\n    background-color: #145a94;\n    cursor: pointer;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    color: white;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n    font-weight: 900;\n    border: 0;\n}\n\n.add-task-btn:hover {\n    background-color: #54b3d6;\n}\n\n/* addTask, edit and delete buttons - end*/'],sourceRoot:""}]);const d=i},476:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var A=[].concat(e[s]);r&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),n.push(A))}},n}},559:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},892:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],d=0;d<e.length;d++){var c=e[d],s=r.base?c[0]+r.base:c[0],A=o[s]||0,l="".concat(s," ").concat(A);o[s]=A+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=a(u,r);r.byIndex=d,n.splice(d,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var d=t(o[i]);n[d].references--}for(var c=r(e,a),s=0;s<o.length;s++){var A=t(o[s]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=c}}},311:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},60:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},192:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},760:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},865:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},174:(e,n,t)=>{t.d(n,{B0:()=>o,f2:()=>a});var r=t(369);const a=()=>{localStorage.setItem("ProjectsData",JSON.stringify(r.q))},o=()=>{let e=localStorage.getItem("ProjectsData"),n=JSON.parse(e);r.q.length=0,i(n)},i=e=>{for(let n=0;n<e.length;n++){(0,r.$L)(e[n].title,e[n].description);for(let t=0;t<e[n].todoList.length;t++)r.q[n].addToDo(e[n].todoList[t].name,e[n].todoList[t].dueDate,e[n].todoList[t].complete,e[n].todoList[t].priority)}}},369:(e,n,t)=>{t.d(n,{$L:()=>d,_5:()=>A,q:()=>a,th:()=>s});var r=t(209);let a=[];class o{constructor(e,n){this.title=e,this.description=n,this.todoList=[]}}class i{constructor(e,n,t,r){this.name=e,this.dueDate=n,this.complete=t,this.priority=r}}const d=(e,n)=>{const t=new o(e,n);return c(t),t};o.prototype.addToDo=function(e,n,t,r){const a=new i(e,n,t,r);this.todoList.push(a)},o.prototype.removeTask=function(e){this.todoList.splice(e,1)};const c=e=>{a.push(e)},s=e=>{a.splice(e,1),(0,r.FK)()},A=(e,n)=>{a[e].todoList.splice(n,1)}},209:(e,n,t)=>{t.d(n,{ab:()=>K,pN:()=>ee,hN:()=>ne,Df:()=>_,UW:()=>G,ZP:()=>V,zN:()=>oe,zX:()=>de,FK:()=>ce,NO:()=>re});var r=t(369);function a(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function o(e){a(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(e,n){a(2,arguments);var t=o(e),r=o(n),i=t.getTime()-r.getTime();return i<0?-1:i>0?1:i}function d(e,n){a(2,arguments);var t=o(e),r=o(n),i=t.getFullYear()-r.getFullYear(),d=t.getMonth()-r.getMonth();return 12*i+d}function c(e){a(1,arguments);var n=o(e);return n.setHours(23,59,59,999),n}function s(e){a(1,arguments);var n=o(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(23,59,59,999),n}function A(e){a(1,arguments);var n=o(e);return c(n).getTime()===s(n).getTime()}function l(e,n){a(2,arguments);var t,r=o(e),c=o(n),s=i(r,c),l=Math.abs(d(r,c));if(l<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-s*l);var p=i(r,c)===-s;A(o(e))&&1===l&&1===i(e,c)&&(p=!1),t=s*(l-Number(p))}return 0===t?0:t}function p(e,n){return a(2,arguments),o(e).getTime()-o(n).getTime()}var u={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function m(e){return e?u[e]:u.trunc}function h(e,n,t){a(2,arguments);var r=p(e,n)/1e3;return m(null==t?void 0:t.roundingMethod)(r)}var f={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}var b,y={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(e){return function(n,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var d=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[d]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function C(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=n.match(a);if(!o)return null;var i,d=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(c)?B(c,(function(e){return e.test(d)})):x(c,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(s):s,i=t.valueCallback?t.valueCallback(i):i;var A=n.slice(d.length);return{value:i,rest:A}}}function x(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function B(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const w={code:"en-US",formatDistance:function(e,n,t){var r,a=f[e];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:function(e,n,t,r){return I[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(b.matchPattern);if(!t)return null;var r=t[0],a=e.match(b.parsePattern);if(!a)return null;var o=b.valueCallback?b.valueCallback(a[0]):a[0];o=n.valueCallback?n.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:C({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:C({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:C({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:C({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:C({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e){return function(e,n){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in n=n||{})Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e}({},e)}function j(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var E=1440,S=43200;function D(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};a(2,arguments);var r=t.locale||w;if(!r.formatDistance)throw new RangeError("locale must contain formatDistance property");var d=i(e,n);if(isNaN(d))throw new RangeError("Invalid time value");var c,s,A=v(t);A.addSuffix=Boolean(t.addSuffix),A.comparison=d,d>0?(c=o(n),s=o(e)):(c=o(e),s=o(n));var p,u=h(s,c),m=(j(s)-j(c))/1e3,f=Math.round((u-m)/60);if(f<2)return t.includeSeconds?u<5?r.formatDistance("lessThanXSeconds",5,A):u<10?r.formatDistance("lessThanXSeconds",10,A):u<20?r.formatDistance("lessThanXSeconds",20,A):u<40?r.formatDistance("halfAMinute",null,A):u<60?r.formatDistance("lessThanXMinutes",1,A):r.formatDistance("xMinutes",1,A):0===f?r.formatDistance("lessThanXMinutes",1,A):r.formatDistance("xMinutes",f,A);if(f<45)return r.formatDistance("xMinutes",f,A);if(f<90)return r.formatDistance("aboutXHours",1,A);if(f<E){var g=Math.round(f/60);return r.formatDistance("aboutXHours",g,A)}if(f<2520)return r.formatDistance("xDays",1,A);if(f<S){var b=Math.round(f/E);return r.formatDistance("xDays",b,A)}if(f<86400)return p=Math.round(f/S),r.formatDistance("aboutXMonths",p,A);if((p=l(s,c))<12){var y=Math.round(f/S);return r.formatDistance("xMonths",y,A)}var I=p%12,k=Math.floor(p/12);return I<3?r.formatDistance("aboutXYears",k,A):I<9?r.formatDistance("overXYears",k,A):r.formatDistance("almostXYears",k+1,A)}function T(e,n){return a(1,arguments),D(e,Date.now(),n)}Math.pow(10,8);var q=36e5;function N(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function P(e,n){a(1,arguments);var t=n||{},r=null==t.additionalDigits?2:N(t.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,i=Y(e);if(i.date){var d=z(i.date,r);o=U(d.restDateString,d.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var c,s=o.getTime(),A=0;if(i.time&&(A=F(i.time),isNaN(A)))return new Date(NaN);if(!i.timezone){var l=new Date(s+A),p=new Date(0);return p.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),p.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),p}return c=X(i.timezone),isNaN(c)?new Date(NaN):new Date(s+A+c)}var M={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},$=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,W=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,L=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Y(e){var n,t={},r=e.split(M.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?n=r[0]:(t.date=r[0],n=r[1],M.timeZoneDelimiter.test(t.date)&&(t.date=e.split(M.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var a=M.timezone.exec(n);a?(t.time=n.replace(a[1],""),t.timezone=a[1]):t.time=n}return t}function z(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function U(e,n){if(null===n)return new Date(NaN);var t=e.match($);if(!t)return new Date(NaN);var r=!!t[4],a=Z(t[1]),o=Z(t[2])-1,i=Z(t[3]),d=Z(t[4]),c=Z(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,d,c)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,d,c):new Date(NaN);var s=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(H[n]||(R(e)?29:28))}(n,o,i)&&function(e,n){return n>=1&&n<=(R(e)?366:365)}(n,a)?(s.setUTCFullYear(n,o,Math.max(a,i)),s):new Date(NaN)}function Z(e){return e?parseInt(e):1}function F(e){var n=e.match(W);if(!n)return NaN;var t=O(n[1]),r=O(n[2]),a=O(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,a)?t*q+6e4*r+1e3*a:NaN}function O(e){return e&&parseFloat(e.replace(",","."))||0}function X(e){if("Z"===e)return 0;var n=e.match(L);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,a)?t*(r*q+6e4*a):NaN}var H=[31,null,31,30,31,30,31,31,30,31,30,31];function R(e){return e%400==0||e%4==0&&e%100!=0}var J=t(174);const Q=function(){const e=e=>document.querySelector(e),n=e=>document.querySelectorAll(e),t=function(e,n,t){r.q[e].title=n,r.q[e].description=t,(0,J.f2)()},a=(e,n)=>{let t=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .status`),a=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .task`).value,o=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .due-date`).value,d=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .priority-level`).value,c=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .remaining`);t=t=!!t.checked,r.q[e].todoList[n].complete=t,r.q[e].todoList[n].name=a,r.q[e].todoList[n].dueDate=o,r.q[e].todoList[n].priority=d,Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .priority-level > option`);let s=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .low-priority`),A=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .med-priority`),l=Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .high-priority`);s.removeAttribute("selected"),A.removeAttribute("selected"),l.removeAttribute("selected"),"low"===d&&i(s,"selected",""),"medium"===d&&i(A,"selected",""),"high"===d&&i(l,"selected","");let p=T(P(o),{addSuffix:!0});c.textContent=p},o=(e,n,t,r,a)=>{let o=document.createElement(e);null!==t&&o.classList.add(t),"project"===t&&(c(o),d(o)),"status"===t&&(o.setAttribute("type","checkbox"),o.checked="true"===a||!0===a),""!==r&&r>=0&&("task-container"===t?i(o,"data-taskIndex",r):o.setAttribute("data-projectIndex",r)),null!==a&&(o.textContent=a),document.querySelector(n).appendChild(o)},i=(e,n,t)=>{e.setAttribute(n,t)},d=e=>{let n=document.getElementsByClassName("project-container");for(let t in Array.from(n))e.getAttribute("data-projectIndex")!==n[t].getAttribute("data-projectIndex")?n[t].classList.add("hidden"):n[t].classList.remove("hidden")},c=e=>{e.addEventListener("click",(()=>{d(e)}))},s=(e,n)=>{document.querySelector(e).classList.add(n)};return{addProject:(a,d,c,A)=>{c&&((0,r.$L)(a,d),A=r.q.length-1);const l=`.project-container[data-projectIndex="${A}"]`,p=`.project-container[data-projectIndex="${A}"] .project-info`;o("li",".project-list","project",A,a),o("div",".main","project-container",A,""),o("div",l,"project-info",A,""),o("INPUT",p,"project-name",A,"");const u=`.project-container[data-projectIndex="${A}"] .project-name`;i(e(u),"value",a),i(e(u),"type","text"),s(u,"input-locked"),o("INPUT",p,"project-description",A,"");const m=`.project-container[data-projectIndex="${A}"] .project-description`;i(e(m),"value",d),i(e(m),"type","text"),s(m,"input-locked"),o("div",p,"btn-container","",""),o("button",p+" div:last-child","proj-edit-btn",A,"Edit"),o("button",p+" div:last-child","proj-del-btn",A,"Delete"),o("div",l,"task-list-container",A,""),o("button",l,"add-task-btn",A,"+"),(0,J.f2)(),(t=>{let a=document.querySelector(`.project-container[data-projectIndex="${t}"] .proj-del-btn`),o=e(`.project-container[data-projectIndex="${t}"] .proj-edit-btn`),i=n(`.project-container[data-projectIndex="${t}"] input[type=text]`);a.addEventListener("click",(()=>{"Delete"===a.textContent?(se(a),(0,J.f2)()):(a.textContent="Delete",o.textContent="Edit",e(`.project-container[data-projectIndex="${t}"] .project-name`).value=r.q[t].title,e(`.project-container[data-projectIndex="${t}"] .project-description`).value=r.q[t].description,i.forEach((e=>{e.classList.add("input-locked")})))}))})(A),(e=>{document.querySelector(`.project-container[data-projectIndex="${e}"] .add-task-btn`).addEventListener("click",(()=>{let n=document.querySelector(".newTaskEntry");n.removeAttribute("data-projectIndex"),Q.addAttribute(n,"data-projectIndex",e),Q.hideElement(".newProjEntry"),Q.showElement(".popup-container"),Q.showElement(".newTaskEntry")}))})(A),(r=>{let a=e(`.project-container[data-projectIndex="${r}"] .proj-edit-btn`),o=e(`.project-container[data-projectIndex="${r}"] .proj-del-btn`),i=n(`.project-container[data-projectIndex="${r}"] input[type=text]`);a.addEventListener("click",(n=>{"Edit"===a.textContent?(a.textContent="Save",o.textContent="Cancel",i.forEach((e=>{e.classList.remove("input-locked")}))):(a.textContent="Edit",o.textContent="Delete",i.forEach((e=>{e.classList.add("input-locked"),e.setAttribute("value",e.value)})),t(r,e(`.project-container[data-projectIndex="${r}"] .project-name`).value,e(`.project-container[data-projectIndex="${r}"] .project-description`).value),ce())}))})(A)},addTask:(t,d,c,A,l,p,u)=>{p&&(r.q[t].addToDo(d,c,A,l,p),u=r.q[t].todoList.length-1),o("div",`.project-container[data-projectIndex="${t}"] .task-list-container`,"task-container",u,"");let m=`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"]`;o("div",m,"checkbox-container","",""),o("INPUT",m+" .checkbox-container","status",t,A),o("label",m+" .checkbox-container","checkbox-label","","");let h=e(m+" .checkbox-container .status"),f=e(m+" .checkbox-container label");i(h,"id","checkbox_"+t+"_"+u),i(f,"for","checkbox_"+t+"_"+u),o("INPUT",m,"task",t,d);const g=`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"] .task`;i(e(g),"value",d),i(e(g),"type","text"),s(g,"input-locked"),o("label",m,"target","","Due: "),o("INPUT",m,"due-date",t,"");const b=`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"] .due-date`;i(e(b),"type","date"),i(e(b),"value",c),s(b,"input-locked");let y=T(P(c),"includeSeconds",{addSuffix:!0});o("label",m,"remaining","",y),o("label",m,"new-task-priority","","Priority: "),o("select",m,"priority-level","task-options","");const I=document.querySelector(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"] .priority-level`);i(I,"name","priority-level"),i(I,"id","priority-level"),i(I,"value",l);const k=`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"] .priority-level`;s(k,"input-locked"),o("option",k,"low-priority","low-priority","Low");const C=document.querySelector(k+" .low-priority");i(C,"value","low"),"low"!==l&&"Low"!==l||i(C,"selected",""),o("option",k,"med-priority","med-priority","Medium");const x=document.querySelector(k+" .med-priority");i(x,"value","medium"),"medium"!==l&&"Medium"!==l||i(x,"selected",""),o("option",k,"high-priority","high-priority","High");const B=document.querySelector(k+" .high-priority");i(B,"value","high"),"high"!==l&&"High"!==l||i(B,"selected",""),o("button",m,"task-edit-btn",t,"Edit"),o("button",m,"task-delete-btn",t,"Delete");const w=document.querySelector(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${u}"] > *:last-child`);w.setAttribute("data-taskIndex",u);let v=te.bind(null,w);w.removeEventListener("click",v),w.addEventListener("click",v),((t,r)=>{let o=e(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${r}"] .task-edit-btn`),i=e(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${r}"] .task-delete-btn`),d=n(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${r}"] input, \n            .project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${r}"] select`);o.addEventListener("click",(()=>{"Edit"===o.textContent?(o.textContent="Save",i.textContent="Cancel",le(t,r,!1),d.forEach((e=>{e.classList.remove("input-locked")}))):(o.textContent="Edit",i.textContent="Delete",le(t,r,!0),d.forEach((e=>{"status"!==e.className&&e.classList.add("input-locked"),a(t,r),Ae(t,r),(0,J.f2)()})))}))})(t,u),((n,t)=>{e(`.project-container[data-projectIndex="${n}"] .task-container[data-taskIndex="${t}"] .status`).addEventListener("click",(()=>{a(n,t),(0,J.f2)()}))})(t,u),le(t,u,!0),Ae(t,u)},addAttribute:i,createNode:o,showElement:e=>{document.querySelector(e).classList.remove("hidden")},hideElement:e=>{document.querySelector(e).classList.add("hidden")},addClass:s,qS:e,qSA:n,restoreTasks:(e,n)=>{Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .status`).value=r.q[e].todoList[n].complete,Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .task`).value=r.q[e].todoList[n].name,Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .due-date`).value=r.q[e].todoList[n].dueDate,Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .priority-level`).value=r.q[e].todoList[n].priority}}}(),V=Q,_=()=>{Q.createNode("div","body","popup-container","",""),Q.addClass(".popup-container","hidden"),Q.createNode("div",".popup-container","newProjEntry","",""),Q.createNode("h3",".newProjEntry","add-proj-title","","Add New Project"),Q.createNode("label",".newProjEntry","new-project-label","","Project Name: "),Q.createNode("INPUT",".new-project-label","new-project-input","",""),Q.createNode("label",".newProjEntry","new-project-label-description","","Description: "),Q.createNode("INPUT",".new-project-label-description","new-project-desc-input","",""),Q.createNode("div",".newProjEntry","btn-container","",""),Q.createNode("button",".btn-container","popup-addProj-btn","","Add"),Q.createNode("button",".btn-container","popup-cancelProj-btn","","Cancel"),document.querySelector(".new-project-input").value="Default Project",document.querySelector(".new-project-desc-input").value="Default Project Description"},G=()=>{Q.createNode("div",".popup-container","newTaskEntry","",""),Q.createNode("h3",".newTaskEntry","add-task-title","","Add New Task"),Q.createNode("label",".newTaskEntry","new-task-label","","Task Name: "),Q.createNode("INPUT",".new-task-label","new-task-input-title","",""),Q.createNode("label",".newTaskEntry","new-task-dueDate","","Due Date: "),Q.createNode("INPUT",".new-task-dueDate","new-task-input-dueDate","",""),document.querySelector(".new-task-input-title").value="Default Task";let e=document.querySelector(".new-task-input-dueDate");Q.addAttribute(e,"type","date");const n=new Date;let t=n.getDate()+1,r=n.getMonth()+1;r<10&&(r="0"+r),t<10&&(t="0"+t);const a=n.getFullYear()+"-"+r+"-"+t;e.value=a,Q.createNode("label",".newTaskEntry","new-task-priority","","Priority: "),Q.createNode("select",".new-task-priority","priority-level","task-options","");const o=document.querySelector(".priority-level");Q.addAttribute(o,"name","priority-level"),Q.addAttribute(o,"id","priority-level"),Q.createNode("option",".priority-level","low-priority","low-priority","Low");const i=document.querySelector(".low-priority");Q.addAttribute(i,"value","low"),Q.createNode("option",".priority-level","med-priority","med-priority","Medium");const d=document.querySelector(".med-priority");Q.addAttribute(d,"value","medium"),Q.createNode("option",".priority-level","high-priority","high-priority","High");const c=document.querySelector(".high-priority");Q.addAttribute(c,"value","high"),Q.createNode("div",".newTaskEntry","btn-container","",""),Q.createNode("button",".newTaskEntry .btn-container","popup-addTask-btn","","Add"),Q.createNode("button",".newTaskEntry .btn-container","popup-cancelTask-btn","","Cancel")},K=()=>{document.querySelector(".add-proj-btn").addEventListener("click",(()=>{Q.hideElement(".newTaskEntry"),Q.showElement(".popup-container"),Q.showElement(".newProjEntry")}))},ee=()=>{document.querySelector(".popup-cancelProj-btn").addEventListener("click",(()=>{Q.hideElement(".popup-container"),Q.hideElement(".newProjEntry")}))},ne=()=>{document.querySelector(".popup-cancelTask-btn").addEventListener("click",(()=>{Q.hideElement(".popup-container"),Q.hideElement(".newTaskEntry")}))},te=e=>{let n=e.parentElement.getAttribute("data-taskIndex"),t=e.getAttribute("data-projectIndex"),a=Q.qS(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${n}"] .task-edit-btn`),o=Q.qS(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${n}"] .task-delete-btn`),i=Q.qSA(`.project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${n}"] input, \n        .project-container[data-projectIndex="${t}"] .task-container[data-taskIndex="${n}"] select`);"Cancel"===o.textContent?(o.textContent="Delete",a.textContent="Edit",le(t,n,!0),i.forEach((e=>{"status"!==e.className&&e.classList.add("input-locked")})),Q.restoreTasks(t,n)):((0,r._5)(t,n),re(t),le(t,n,!1))},re=e=>{let n=document.querySelector(`.task-list-container[data-projectIndex="${e}"]`);for(;n.firstChild;)n.removeChild(n.firstChild);for(let n in r.q[e].todoList)Q.addTask(e,r.q[e].todoList[n].name,r.q[e].todoList[n].dueDate,r.q[e].todoList[n].complete,r.q[e].todoList[n].priority,!1,n),Ae(e,n)},ae=()=>{let e=document.querySelector(".new-project-input").value,n=document.querySelector(".new-project-desc-input").value;Q.addProject(e,n,!0,""),Q.hideElement(".popup-container"),Q.hideElement(".newProjEntry");const t=new Date;let a=t.getDate()+1,o=t.getMonth()+1;o<10&&(o="0"+o),a<10&&(a="0"+a);const i=t.getFullYear()+"-"+o+"-"+a;Q.addTask(r.q.length-1,"Default Task",i,!1,"low",!0,0),(0,J.f2)()},oe=()=>{let e=document.querySelector(".popup-addProj-btn");e.removeEventListener("click",ae),e.addEventListener("click",ae)},ie=()=>{let e=document.querySelector(".newTaskEntry").getAttribute("data-projectIndex"),n=document.querySelector(".new-task-input-title").value,t=document.querySelector(".new-task-input-dueDate").value,r=document.querySelector(".popup-container .priority-level").value;Q.addTask(e,n,t,!1,r,!0,""),Q.hideElement(".popup-container"),Q.hideElement(".newTaskEntry")},de=()=>{document.querySelector(".popup-addTask-btn").addEventListener("click",ie)},ce=()=>{let e=document.querySelector(".project-list"),n=document.querySelector(".main");for(;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)n.removeChild(n.firstChild);for(let e in r.q){Q.addProject(r.q[e].title,r.q[e].description,!1,e);for(let n in r.q[e].todoList)Q.addTask(e,r.q[e].todoList[n].name,r.q[e].todoList[n].dueDate,r.q[e].todoList[n].complete,r.q[e].todoList[n].priority,!1,n)}(()=>{let e=document.getElementsByClassName("add-task-btn");const n=document.querySelector(".newTaskEntry");for(let t of Array.from(e)){let e=t.getAttribute("data-projectIndex");t.addEventListener("click",(()=>{n.removeAttribute("data-projectIndex"),Q.addAttribute(n,"data-projectIndex",e),Q.hideElement(".newProjEntry"),Q.showElement(".popup-container"),Q.showElement(".newTaskEntry")}))}})()},se=e=>{let n=e.getAttribute("data-projectIndex");(0,r.th)(n),(0,J.f2)(),oe()},Ae=(e,n)=>{let t=T(P(Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .due-date`).value),{addSuffix:!0});Q.qS(`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .remaining`).textContent=t},le=(e,n,t)=>{let r=`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .due-date`,a=`.project-container[data-projectIndex="${e}"] .task-container[data-taskIndex="${n}"] .remaining`;!0===t?(Q.showElement(a),Q.hideElement(r)):(Q.showElement(r),Q.hideElement(a))}},828:(e,n,t)=>{var r=t(892),a=t.n(r),o=t(760),i=t.n(o),d=t(311),c=t.n(d),s=t(192),A=t.n(s),l=t(60),p=t.n(l),u=t(865),m=t.n(u),h=t(519),f={};f.styleTagTransform=m(),f.setAttributes=A(),f.insert=c().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=p(),a()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var g=t(369),b=t(209),y=t(174);(0,b.Df)(),(0,b.UW)();const I=new Date;let k=I.getDate()+1,C=I.getMonth()+1;C<10&&(C="0"+C),k<10&&(k="0"+k);const x=I.getFullYear()+"-"+C+"-"+k;if(null!==localStorage.getItem("ProjectsData")){(0,y.B0)();for(let e=0;e<g.q.length;e++)if(b.ZP.addProject(g.q[e].title,g.q[e].description,!1,e),0===g.q[e].todoList.length)b.ZP.addTask(e,"Default 1st Task",x,!1,"low",!0,0),(0,y.f2)();else for(let n=0;n<g.q[e].todoList.length;n++)(0,b.NO)(e)}else b.ZP.addProject("Default Project","Description for Default Project",!0,""),b.ZP.addTask(0,"Default 1st Task",x,!1,"low",!0,""),b.ZP.addTask(0,"Default 2nd Task",x,!1,"medium",!0,""),(0,y.f2)();(0,b.ab)(),(0,b.pN)(),(0,b.zN)(),(0,b.hN)(),(0,b.zX)()}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t(828),t(209),t(369)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTM2YsR0FBVUEsRUFBTzRmLFdBQzdCLElBQU81ZixFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQXNmLEVBQW9CTyxFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxHQ0xSTCxFQUFvQk8sRUFBSSxDQUFDM2YsRUFBUzZmLEtBQ2pDLElBQUksSUFBSXRRLEtBQU9zUSxFQUNYVCxFQUFvQlUsRUFBRUQsRUFBWXRRLEtBQVM2UCxFQUFvQlUsRUFBRTlmLEVBQVN1UCxJQUM1RTNHLE9BQU9tWCxlQUFlL2YsRUFBU3VQLEVBQUssQ0FBRXlRLFlBQVksRUFBTUMsSUFBS0osRUFBV3RRLE1DSjNFNlAsRUFBb0JVLEVBQUksQ0FBQ2hkLEVBQUtvZCxJQUFVdFgsT0FBT2pCLFVBQVV3SSxlQUFldEgsS0FBSy9GLEVBQUtvZCxHQ0VsRmQsRUFBb0IsS0FFcEJBLEVBQW9CLEtBQ01BLEVBQW9CLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vZGlzdC9sb2NhbC1zdG9yYWdlLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvZGF0YS1zdHJ1Y3R1cmUuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0xhc3REYXlPZk1vbnRoL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbk1vbnRocy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yb3VuZGluZ01ldGhvZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluU2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9jbG9uZU9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Fzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0RGlzdGFuY2VUb05vdy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2VJU08vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMuY3NzP2U2N2IiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgZm9udC1zaXplOiBsYXJnZTtcXG59XFxuXFxuYm9keSwgaHRtbCB7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBPeHlnZW4sXFxuICAgIFVidW50dSwgQ2FudGFyZWxsLCBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG59XFxuXFxuLnBhZ2Utd3JhcHBlciB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDVmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxNTBweCBhdXRvO1xcbn1cXG5cXG4uaGVhZGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMmM0ODtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmhlYWRlciBoMSB7XFxuICAgIGZvbnQtc2l6ZTogM2VtO1xcbn1cXG5cXG4ucHJvamVjdC1zaWRlYmFyIHtcXG4gICAgZ3JpZC1yb3c6IDIgLyAzO1xcbiAgICBtaW4td2lkdGg6IDMwMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGU0MDZhO1xcbiAgICBjb2xvcjogI2JkY2JmMztcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuLnByb2plY3Qtc2lkZWJhciAuYWRkLXByb2otYnRuIHtcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDJyZW07XFxuICAgIGhlaWdodDogMnJlbTtcXG4gICAgd2lkdGg6IDJyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksXFxuICAgIDAgM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgMXB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIE94eWdlbixcXG4gICAgVWJ1bnR1LCBDYW50YXJlbGwsIFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG59XFxuXFxuLnByb2plY3Qtc2lkZWJhciAuYWRkLXByb2otYnRuOmZvY3Vze1xcbiAgICBvdXRsaW5lOiAwO1xcbn1cXG5cXG4ucHJvamVjdC1zaWRlYmFyIC5hZGQtcHJvai1idG46aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM1NGIzZDY7XFxufVxcblxcbi5wcm9qZWN0LWxpc3Qge1xcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuLnByb2plY3QtbGlzdCBsaSB7XFxuICAgIG1hcmdpbjogMXJlbSAxcmVtO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wcm9qZWN0LWluZm8ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXG4gICAgaGVpZ2h0OiA1cmVtO1xcbiAgICBib3JkZXItYm90dG9tOiA0cHggc29saWQgIzE0NWE5NDtcXG59XFxuXFxuLnByb2plY3QtaW5mbyAuYnRuLWNvbnRhaW5lciB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gMztcXG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XFxuICAgIHBhZGRpbmc6IDFyZW0gMDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAwLjNyZW07XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxuXFxuLnByb2plY3QtaW5mbyAuYnRuLWNvbnRhaW5lciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiAycHggNXB4O1xcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4vKiAucHJvamVjdC1pbmZvIGlucHV0W3R5cGU9dGV4dF0ge1xcbiAgICBmb250LXNpemU6IGxhcmdlcjtcXG59ICovXFxuXFxuLmlucHV0LWxvY2tlZCB7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLm1haW4ge1xcbiAgICBncmlkLXJvdzogMiAvIDM7XFxuICAgIHBhZGRpbmc6IDJyZW07XFxufVxcblxcbi50YXNrLWxpc3QtY29udGFpbmVyIHtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAtMTtcXG59XFxuXFxuLnRhc2stY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjNTRiM2Q2O1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICAgIG1hcmdpbjogMXJlbTtcXG4gICAgcGFkZGluZzogMXJlbSAxcmVtIDFyZW0gMnJlbTtcXG59XFxuXFxuLnRhc2stY29udGFpbmVyOmhvdmVyIHtcXG4gICAgYm94LXNoYWRvdzogM3B4IDhweCAxNHB4IC0xMHB4IHJnYmEoMCwwLDAsMC41Mik7XFxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogM3B4IDhweCAxNHB4IC0xMHB4IHJnYmEoMCwwLDAsMC41Mik7XFxuICAgIC1tb3otYm94LXNoYWRvdzogM3B4IDhweCAxNHB4IC0xMHB4IHJnYmEoMCwwLDAsMC41Mik7XFxufVxcblxcbi50YXNrLWNvbnRhaW5lciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiAycHggNXB4O1xcbn1cXG5cXG4udGFzay1jb250YWluZXIgLnJlbWFpbmluZyB7XFxuICAgIHdpZHRoOiAxMHJlbTtcXG4gICAgbWFyZ2luOiAwIDFyZW07XFxufVxcblxcbi5kdWUtZGF0ZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICB3aWR0aDogMTByZW07XFxuICAgIG1hcmdpbjogMCAxcmVtO1xcbn1cXG5cXG4vKiAucHJpb3JpdHkge1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG59ICovXFxuXFxuLyogLnByaW9yaXR5OjpiZWZvcmUge1xcbiAgICBjb250ZW50OiAnfCc7XFxuICAgIG1hcmdpbjogMTBweDtcXG59ICovXFxuXFxuLnByaW9yaXR5LWxldmVsIHtcXG4gICAgbWFyZ2luOiAwIDJyZW0gMCAwO1xcbn1cXG5cXG4ucG9wdXAtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gICAgLyogb3BhY2l0eTogMC43OyAqL1xcbiAgICB6LWluZGV4OiAxO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxufVxcblxcbmlucHV0LCBzZWxlY3Qge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMTQ1YTk0O1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLm5ld1Byb2pFbnRyeSwgLm5ld1Rhc2tFbnRyeSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogMnJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHBhZGRpbmc6IDJyZW07XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICMxNDVhOTQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gICAgYm94LXNoYWRvdzogMnB4IDEwcHggMjlweCAtMTBweCByZ2JhKDAsMCwwLDAuNzUpO1xcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDJweCAxMHB4IDI5cHggLTEwcHggcmdiYSgwLDAsMCwwLjc1KTtcXG4gICAgLW1vei1ib3gtc2hhZG93OiAycHggMTBweCAyOXB4IC0xMHB4IHJnYmEoMCwwLDAsMC43NSk7XFxufVxcblxcbi5uZXdQcm9qRW50cnkgbGFiZWwsIC5uZXdUYXNrRW50cnkgbGFiZWx7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4ubmV3UHJvakVudHJ5IGgzLCAubmV3VGFza0VudHJ5IGgzIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgbWFyZ2luOiBhdXRvO1xcbiAgICBmb250LXNpemU6IGxhcmdlcjtcXG4gICAgY29sb3I6ICMxNDVhOTQ7XFxufVxcblxcbi5uZXdQcm9qRW50cnkgLmJ0bi1jb250YWluZXIsIC5uZXdUYXNrRW50cnkgLmJ0bi1jb250YWluZXJ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBnYXA6IDAuNXJlbTtcXG59XFxuXFxuLm5ld1Byb2pFbnRyeSBidXR0b24sIC5uZXdUYXNrRW50cnkgYnV0dG9uIHtcXG4gICAgd2lkdGg6IDQuM3JlbTtcXG4gICAgaGVpZ2h0OiAycmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGU0MDZhO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC1zaXplOiBzbWFsbDtcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ubmV3UHJvakVudHJ5IC5wb3B1cC1hZGRQcm9qLWJ0bjpob3ZlcixcXG4ubmV3VGFza0VudHJ5IC5wb3B1cC1hZGRUYXNrLWJ0bjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7XFxufVxcblxcbi5uZXdQcm9qRW50cnkgLnBvcHVwLWNhbmNlbFByb2otYnRuOmhvdmVyLFxcbi5uZXdUYXNrRW50cnkgLnBvcHVwLWNhbmNlbFRhc2stYnRuOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0NDMzNjtcXG59XFxuXFxuLm5ld1Rhc2tFbnRyeSBzZWxlY3Qge1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbi5uZXdUYXNrRW50cnkgaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdIHtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgei1pbmRleDogLTE7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG5pbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl06Oi13ZWJraXQtY2FsZW5kYXItcGlja2VyLWluZGljYXRvciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJde1xcbiAgICBtYXJnaW46IDAgMnJlbSAwIDA7XFxuICAgIGZvbnQtc2l6ZTogbGFyZ2UgIWltcG9ydGFudDtcXG59XFxuXFxuI3ByaW9yaXR5LWxldmVsIHtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIHRleHQtaW5kZW50OiAxcHg7XFxuICAgIHRleHQtb3ZlcmZsb3c6ICcnO1xcbiAgICB3aWR0aDogOWNoO1xcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xcbn1cXG5cXG4udGFyZ2V0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxufVxcblxcbi8qIGNoZWNrYm94J3MgbG9vayAqL1xcbi5jaGVja2JveC1jb250YWluZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbiAgXFxuLmNoZWNrYm94LWNvbnRhaW5lciBsYWJlbCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgaGVpZ2h0OiAyOHB4O1xcbiAgICBsZWZ0OiAtMTVweDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0zcHg7XFxuICAgIHdpZHRoOiAyOHB4O1xcbn1cXG4gIFxcbi5jaGVja2JveC1jb250YWluZXIgbGFiZWw6YWZ0ZXIge1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZmZmO1xcbiAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICBoZWlnaHQ6IDZweDtcXG4gICAgbGVmdDogN3B4O1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogOHB4O1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xcbiAgICB3aWR0aDogMTJweDtcXG59XFxuICBcXG4uY2hlY2tib3gtY29udGFpbmVyIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcbiAgXFxuLmNoZWNrYm94LWNvbnRhaW5lciBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQgKyBsYWJlbCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NmJiNmE7XFxuICAgIGJvcmRlci1jb2xvcjogIzY2YmI2YTtcXG59XFxuICBcXG4uY2hlY2tib3gtY29udGFpbmVyIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCArIGxhYmVsOmFmdGVyIHtcXG4gICAgb3BhY2l0eTogMTtcXG59XFxuLyogY2hlY2tib3gncyBsb29rIC0gZW5kICovXFxuXFxuLyogbGkgYW5pbWF0aW9uICovXFxudWwgPiAqIHtcXG4gICAgcGFkZGluZzogMC41cmVtIDA7XFxufVxcblxcbmxpIHtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgdG8gcmlnaHQsXFxuICAgICAgICB3aGl0ZSxcXG4gICAgICAgIHdoaXRlIDUwJSxcXG4gICAgICAgICM3M2MwZmYgNTAlXFxuICAgICk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMjAwJSAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTAwJTtcXG4gICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XFxufVxcblxcbmxpOmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBiYWNrZ3JvdW5kOiAjNTRiM2Q2O1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206IC0zcHg7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAwO1xcbiAgICBoZWlnaHQ6IDNweDtcXG59XFxuXFxubGk6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwO1xcbn1cXG5cXG5saTpob3Zlcjo6YmVmb3JlIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcbi8qIGxpIGFuaW1hdGlvbiAtZW5kICovXFxuXFxuLyogcHJvamVjdCBpbmZvICovXFxuLnByb2plY3QtaW5mbyB7XFxuICAgIG1hcmdpbjogMXJlbTtcXG4gICAgcGFkZGluZzogMCAwIDJyZW0gMDtcXG59XFxuXFxuLnByb2plY3QtbmFtZSB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGNvbG9yOiAjMGEyYzQ4IDtcXG4gICAgZm9udC1zaXplOiB4LWxhcmdlO1xcbn1cXG4vKiBwcm9qZWN0IGluZm8gLSBlbmQgKi9cXG5cXG4vKiBlZGl0IGFuZCBkZWxldGUgYnV0dG9ucyAqL1xcbi5wcm9qZWN0LWluZm8gYnV0dG9uLCAudGFzay1jb250YWluZXIgYnV0dG9uIHtcXG4gICAgaGVpZ2h0OiAxLjdyZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGZvbnQtc2l6ZTogc21hbGw7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE0NWE5NDtcXG4gICAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ucHJvamVjdC1pbmZvIC5wcm9qLWVkaXQtYnRuLCAudGFzay1jb250YWluZXIgLnRhc2stZWRpdC1idG4ge1xcbiAgICB3aWR0aDogM3JlbTtcXG59XFxuXFxuLnByb2plY3QtaW5mbyAucHJvai1lZGl0LWJ0bjpob3ZlciwgLnRhc2stY29udGFpbmVyIC50YXNrLWVkaXQtYnRuOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcXG4gICAgd2lkdGg6IDNyZW07XFxufVxcblxcbi5wcm9qZWN0LWluZm8gLnByb2otZGVsLWJ0biwgLnRhc2stY29udGFpbmVyIC50YXNrLWRlbGV0ZS1idG4ge1xcbiAgICB3aWR0aDogNHJlbTtcXG59XFxuXFxuLnByb2plY3QtaW5mbyAucHJvai1kZWwtYnRuOmhvdmVyLCAudGFzay1jb250YWluZXIgLnRhc2stZGVsZXRlLWJ0bjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNDQzMzY7XFxuICAgIHdpZHRoOiA0cmVtO1xcbn1cXG5cXG4uYWRkLXRhc2stYnRuIHtcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIGhlaWdodDogMnJlbTtcXG4gICAgd2lkdGg6IDJyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNDVhOTQ7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYm94LXNoYWRvdzogMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSxcXG4gICAgMCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgT3h5Z2VuLFxcbiAgICBVYnVudHUsIENhbnRhcmVsbCwgXFxcIk9wZW4gU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGJvcmRlcjogMDtcXG59XFxuXFxuLmFkZC10YXNrLWJ0bjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM1NGIzZDY7XFxufVxcblxcbi8qIGFkZFRhc2ssIGVkaXQgYW5kIGRlbGV0ZSBidXR0b25zIC0gZW5kKi9cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixTQUFTO0lBQ1Qsc0JBQXNCO0lBQ3RCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixZQUFZO0lBQ1o7Z0VBQzREO0FBQ2hFOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsY0FBYztJQUNkLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osV0FBVztJQUNYLDZCQUE2QjtJQUM3QixlQUFlO0lBQ2Y7c0VBQ2tFO0lBQ2xFLFlBQVk7SUFDWjtnRUFDNEQ7SUFDNUQsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtBQUMzQjs7QUFF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bkIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLGVBQWU7SUFDZjtzRUFDa0U7SUFDbEUsWUFBWTtJQUNaO2dFQUM0RDtJQUM1RCxnQkFBZ0I7SUFDaEIsU0FBUztBQUNiOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBLDBDQUEwQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBmb250LXNpemU6IGxhcmdlO1xcbn1cXG5cXG5ib2R5LCBodG1sIHtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIE94eWdlbixcXG4gICAgVWJ1bnR1LCBDYW50YXJlbGwsIFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4ucGFnZS13cmFwcGVyIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNWZyO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDE1MHB4IGF1dG87XFxufVxcblxcbi5oZWFkZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBncmlkLWNvbHVtbjogMSAvIHNwYW4gMjtcXG4gICAgZ3JpZC1yb3c6IDEgLyAyO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGEyYzQ4O1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaGVhZGVyIGgxIHtcXG4gICAgZm9udC1zaXplOiAzZW07XFxufVxcblxcbi5wcm9qZWN0LXNpZGViYXIge1xcbiAgICBncmlkLXJvdzogMiAvIDM7XFxuICAgIG1pbi13aWR0aDogMzAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZTQwNmE7XFxuICAgIGNvbG9yOiAjYmRjYmYzO1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbn1cXG5cXG4ucHJvamVjdC1zaWRlYmFyIC5hZGQtcHJvai1idG4ge1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcXG4gICAgaGVpZ2h0OiAycmVtO1xcbiAgICB3aWR0aDogMnJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYm94LXNoYWRvdzogMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSxcXG4gICAgMCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgT3h5Z2VuLFxcbiAgICBVYnVudHUsIENhbnRhcmVsbCwgXFxcIk9wZW4gU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cXG4ucHJvamVjdC1zaWRlYmFyIC5hZGQtcHJvai1idG46Zm9jdXN7XFxuICAgIG91dGxpbmU6IDA7XFxufVxcblxcbi5wcm9qZWN0LXNpZGViYXIgLmFkZC1wcm9qLWJ0bjpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU0YjNkNjtcXG59XFxuXFxuLnByb2plY3QtbGlzdCB7XFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTtcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4ucHJvamVjdC1saXN0IGxpIHtcXG4gICAgbWFyZ2luOiAxcmVtIDFyZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnByb2plY3QtaW5mbyB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xcbiAgICBoZWlnaHQ6IDVyZW07XFxuICAgIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCAjMTQ1YTk0O1xcbn1cXG5cXG4ucHJvamVjdC1pbmZvIC5idG4tY29udGFpbmVyIHtcXG4gICAgZ3JpZC1jb2x1bW46IDIgLyAzO1xcbiAgICBncmlkLXJvdzogMSAvIHNwYW4gMjtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcXG4gICAgcGFkZGluZzogMXJlbSAwO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDAuM3JlbTtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbn1cXG5cXG4ucHJvamVjdC1pbmZvIC5idG4tY29udGFpbmVyIGJ1dHRvbiB7XFxuICAgIHBhZGRpbmc6IDJweCA1cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XFxufVxcblxcbi8qIC5wcm9qZWN0LWluZm8gaW5wdXRbdHlwZT10ZXh0XSB7XFxuICAgIGZvbnQtc2l6ZTogbGFyZ2VyO1xcbn0gKi9cXG5cXG4uaW5wdXQtbG9ja2VkIHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubWFpbiB7XFxuICAgIGdyaWQtcm93OiAyIC8gMztcXG4gICAgcGFkZGluZzogMnJlbTtcXG59XFxuXFxuLnRhc2stbGlzdC1jb250YWluZXIge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIC0xO1xcbn1cXG5cXG4udGFzay1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBnYXA6IDEwcHg7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICM1NGIzZDY7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gICAgbWFyZ2luOiAxcmVtO1xcbiAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMXJlbSAycmVtO1xcbn1cXG5cXG4udGFzay1jb250YWluZXI6aG92ZXIge1xcbiAgICBib3gtc2hhZG93OiAzcHggOHB4IDE0cHggLTEwcHggcmdiYSgwLDAsMCwwLjUyKTtcXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiAzcHggOHB4IDE0cHggLTEwcHggcmdiYSgwLDAsMCwwLjUyKTtcXG4gICAgLW1vei1ib3gtc2hhZG93OiAzcHggOHB4IDE0cHggLTEwcHggcmdiYSgwLDAsMCwwLjUyKTtcXG59XFxuXFxuLnRhc2stY29udGFpbmVyIGJ1dHRvbiB7XFxuICAgIHBhZGRpbmc6IDJweCA1cHg7XFxufVxcblxcbi50YXNrLWNvbnRhaW5lciAucmVtYWluaW5nIHtcXG4gICAgd2lkdGg6IDEwcmVtO1xcbiAgICBtYXJnaW46IDAgMXJlbTtcXG59XFxuXFxuLmR1ZS1kYXRlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIHdpZHRoOiAxMHJlbTtcXG4gICAgbWFyZ2luOiAwIDFyZW07XFxufVxcblxcbi8qIC5wcmlvcml0eSB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbn0gKi9cXG5cXG4vKiAucHJpb3JpdHk6OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICd8JztcXG4gICAgbWFyZ2luOiAxMHB4O1xcbn0gKi9cXG5cXG4ucHJpb3JpdHktbGV2ZWwge1xcbiAgICBtYXJnaW46IDAgMnJlbSAwIDA7XFxufVxcblxcbi5wb3B1cC1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgICAvKiBvcGFjaXR5OiAwLjc7ICovXFxuICAgIHotaW5kZXg6IDE7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG59XFxuXFxuaW5wdXQsIHNlbGVjdCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMxNDVhOTQ7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubmV3UHJvakVudHJ5LCAubmV3VGFza0VudHJ5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAycmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMnJlbTtcXG4gICAgYm9yZGVyOiAycHggc29saWQgIzE0NWE5NDtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgICBib3gtc2hhZG93OiAycHggMTBweCAyOXB4IC0xMHB4IHJnYmEoMCwwLDAsMC43NSk7XFxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMnB4IDEwcHggMjlweCAtMTBweCByZ2JhKDAsMCwwLDAuNzUpO1xcbiAgICAtbW96LWJveC1zaGFkb3c6IDJweCAxMHB4IDI5cHggLTEwcHggcmdiYSgwLDAsMCwwLjc1KTtcXG59XFxuXFxuLm5ld1Byb2pFbnRyeSBsYWJlbCwgLm5ld1Rhc2tFbnRyeSBsYWJlbHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBnYXA6IDFyZW07XFxufVxcblxcbi5uZXdQcm9qRW50cnkgaDMsIC5uZXdUYXNrRW50cnkgaDMge1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBtYXJnaW46IGF1dG87XFxuICAgIGZvbnQtc2l6ZTogbGFyZ2VyO1xcbiAgICBjb2xvcjogIzE0NWE5NDtcXG59XFxuXFxuLm5ld1Byb2pFbnRyeSAuYnRuLWNvbnRhaW5lciwgLm5ld1Rhc2tFbnRyeSAuYnRuLWNvbnRhaW5lcntcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGdhcDogMC41cmVtO1xcbn1cXG5cXG4ubmV3UHJvakVudHJ5IGJ1dHRvbiwgLm5ld1Rhc2tFbnRyeSBidXR0b24ge1xcbiAgICB3aWR0aDogNC4zcmVtO1xcbiAgICBoZWlnaHQ6IDJyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZTQwNmE7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBmb250LXNpemU6IHNtYWxsO1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5uZXdQcm9qRW50cnkgLnBvcHVwLWFkZFByb2otYnRuOmhvdmVyLFxcbi5uZXdUYXNrRW50cnkgLnBvcHVwLWFkZFRhc2stYnRuOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcXG59XFxuXFxuLm5ld1Byb2pFbnRyeSAucG9wdXAtY2FuY2VsUHJvai1idG46aG92ZXIsXFxuLm5ld1Rhc2tFbnRyeSAucG9wdXAtY2FuY2VsVGFzay1idG46aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2O1xcbn1cXG5cXG4ubmV3VGFza0VudHJ5IHNlbGVjdCB7XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXFxuLm5ld1Rhc2tFbnRyeSBpbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl0ge1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICB6LWluZGV4OiAtMTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxcbmlucHV0W3R5cGU9XFxcImRhdGVcXFwiXTo6LXdlYmtpdC1jYWxlbmRhci1waWNrZXItaW5kaWNhdG9yIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl17XFxuICAgIG1hcmdpbjogMCAycmVtIDAgMDtcXG4gICAgZm9udC1zaXplOiBsYXJnZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4jcHJpb3JpdHktbGV2ZWwge1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgdGV4dC1pbmRlbnQ6IDFweDtcXG4gICAgdGV4dC1vdmVyZmxvdzogJyc7XFxuICAgIHdpZHRoOiA5Y2g7XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxufVxcblxcbi50YXJnZXQge1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG59XFxuXFxuLyogY2hlY2tib3gncyBsb29rICovXFxuLmNoZWNrYm94LWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuICBcXG4uY2hlY2tib3gtY29udGFpbmVyIGxhYmVsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBoZWlnaHQ6IDI4cHg7XFxuICAgIGxlZnQ6IC0xNXB4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogLTNweDtcXG4gICAgd2lkdGg6IDI4cHg7XFxufVxcbiAgXFxuLmNoZWNrYm94LWNvbnRhaW5lciBsYWJlbDphZnRlciB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7XFxuICAgIGJvcmRlci10b3A6IG5vbmU7XFxuICAgIGJvcmRlci1yaWdodDogbm9uZTtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIGhlaWdodDogNnB4O1xcbiAgICBsZWZ0OiA3cHg7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiA4cHg7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxuICAgIHdpZHRoOiAxMnB4O1xcbn1cXG4gIFxcbi5jaGVja2JveC1jb250YWluZXIgaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuICBcXG4uY2hlY2tib3gtY29udGFpbmVyIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCArIGxhYmVsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY2YmI2YTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjNjZiYjZhO1xcbn1cXG4gIFxcbi5jaGVja2JveC1jb250YWluZXIgaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkICsgbGFiZWw6YWZ0ZXIge1xcbiAgICBvcGFjaXR5OiAxO1xcbn1cXG4vKiBjaGVja2JveCdzIGxvb2sgLSBlbmQgKi9cXG5cXG4vKiBsaSBhbmltYXRpb24gKi9cXG51bCA+ICoge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gMDtcXG59XFxuXFxubGkge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICB0byByaWdodCxcXG4gICAgICAgIHdoaXRlLFxcbiAgICAgICAgd2hpdGUgNTAlLFxcbiAgICAgICAgIzczYzBmZiA1MCVcXG4gICAgKTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiAyMDAlIDEwMCU7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0xMDAlO1xcbiAgICAtd2Via2l0LWJhY2tncm91bmQtY2xpcDogdGV4dDtcXG4gICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcXG59XFxuXFxubGk6YmVmb3JlIHtcXG4gICAgY29udGVudDogJyc7XFxuICAgIGJhY2tncm91bmQ6ICM1NGIzZDY7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTogLTNweDtcXG4gICAgbGVmdDogMDtcXG4gICAgd2lkdGg6IDA7XFxuICAgIGhlaWdodDogM3B4O1xcbn1cXG5cXG5saTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDA7XFxufVxcblxcbmxpOmhvdmVyOjpiZWZvcmUge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuLyogbGkgYW5pbWF0aW9uIC1lbmQgKi9cXG5cXG4vKiBwcm9qZWN0IGluZm8gKi9cXG4ucHJvamVjdC1pbmZvIHtcXG4gICAgbWFyZ2luOiAxcmVtO1xcbiAgICBwYWRkaW5nOiAwIDAgMnJlbSAwO1xcbn1cXG5cXG4ucHJvamVjdC1uYW1lIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgY29sb3I6ICMwYTJjNDggO1xcbiAgICBmb250LXNpemU6IHgtbGFyZ2U7XFxufVxcbi8qIHByb2plY3QgaW5mbyAtIGVuZCAqL1xcblxcbi8qIGVkaXQgYW5kIGRlbGV0ZSBidXR0b25zICovXFxuLnByb2plY3QtaW5mbyBidXR0b24sIC50YXNrLWNvbnRhaW5lciBidXR0b24ge1xcbiAgICBoZWlnaHQ6IDEuN3JlbTtcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgZm9udC1zaXplOiBzbWFsbDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTQ1YTk0O1xcbiAgICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5wcm9qZWN0LWluZm8gLnByb2otZWRpdC1idG4sIC50YXNrLWNvbnRhaW5lciAudGFzay1lZGl0LWJ0biB7XFxuICAgIHdpZHRoOiAzcmVtO1xcbn1cXG5cXG4ucHJvamVjdC1pbmZvIC5wcm9qLWVkaXQtYnRuOmhvdmVyLCAudGFzay1jb250YWluZXIgLnRhc2stZWRpdC1idG46aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwO1xcbiAgICB3aWR0aDogM3JlbTtcXG59XFxuXFxuLnByb2plY3QtaW5mbyAucHJvai1kZWwtYnRuLCAudGFzay1jb250YWluZXIgLnRhc2stZGVsZXRlLWJ0biB7XFxuICAgIHdpZHRoOiA0cmVtO1xcbn1cXG5cXG4ucHJvamVjdC1pbmZvIC5wcm9qLWRlbC1idG46aG92ZXIsIC50YXNrLWNvbnRhaW5lciAudGFzay1kZWxldGUtYnRuOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0NDMzNjtcXG4gICAgd2lkdGg6IDRyZW07XFxufVxcblxcbi5hZGQtdGFzay1idG4ge1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gICAgaGVpZ2h0OiAycmVtO1xcbiAgICB3aWR0aDogMnJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE0NWE5NDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLFxcbiAgICAwIDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDFweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBPeHlnZW4sXFxuICAgIFVidW50dSwgQ2FudGFyZWxsLCBcXFwiT3BlbiBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uYWRkLXRhc2stYnRuOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU0YjNkNjtcXG59XFxuXFxuLyogYWRkVGFzaywgZWRpdCBhbmQgZGVsZXRlIGJ1dHRvbnMgLSBlbmQqL1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IHsgcHJvamVjdHMsIGNyZWF0ZVByb2plY3QgfSBmcm9tIFwiLi4vc3JjL2RhdGEtc3RydWN0dXJlXCJcblxuXG5jb25zdCBzYXZlVG9Mb2NhbCA9ICgpID0+IHtcbiAgICAvLyBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGEnKSA9PT0gbnVsbCl7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdQcm9qZWN0c0RhdGEnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xuICAgIC8vIH1cbn1cblxuY29uc3QgcmVhZEZyb21Mb2NhbCA9ICgpID0+IHtcbiAgICBsZXQgdG9Eb0xpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnUHJvamVjdHNEYXRhJyk7XG4gICAgbGV0IGRlc2VyaWFsaXplZCA9IEpTT04ucGFyc2UodG9Eb0xpc3QpO1xuICAgIC8vIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbiAgICBwcm9qZWN0cy5sZW5ndGggPSAwO1xuICAgIC8vIHByb2plY3RzLnB1c2guYXBwbHkocHJvamVjdHMsZGVzZXJpYWxpemVkICk7XG5cbiAgICBwcm9qZWN0RW5yb2xsZXIoZGVzZXJpYWxpemVkKTtcbiAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cy5hZGRUb0RvKTtcblxufVxuXG5jb25zdCBwcm9qZWN0RW5yb2xsZXIgPSAoZnJvbUpTT04pID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyb21KU09OLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY3JlYXRlUHJvamVjdChmcm9tSlNPTltpXS50aXRsZSwgZnJvbUpTT05baV0uZGVzY3JpcHRpb24pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhmcm9tSlNPTltpXS50b2RvTGlzdCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZnJvbUpTT05baV0udG9kb0xpc3QubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgcHJvamVjdHNbaV0uYWRkVG9Ebyhmcm9tSlNPTltpXS50b2RvTGlzdFtqXS5uYW1lLCBmcm9tSlNPTltpXS50b2RvTGlzdFtqXS5kdWVEYXRlLCBmcm9tSlNPTltpXS50b2RvTGlzdFtqXS5jb21wbGV0ZSwgZnJvbUpTT05baV0udG9kb0xpc3Rbal0ucHJpb3JpdHkpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG5cbmNvbnN0IHVwZGF0ZVByb2plY3RTdG9yYWdlRGF0YSA9ICgpID0+IHtcbiAgICBzYXZlVG9Mb2NhbCgpO1xuICAgIHJlYWRGcm9tTG9jYWwoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG59XG5cbmV4cG9ydCB7IHNhdmVUb0xvY2FsLCByZWFkRnJvbUxvY2FsLCB1cGRhdGVQcm9qZWN0U3RvcmFnZURhdGEgfTsiLCJpbXBvcnQgeyByZW5kZXJQcm9qZWN0cyB9IGZyb20gJy4vZG9tJ1xubGV0IHByb2plY3RzID0gW107XG5cbmNsYXNzIFByb2plY3Qge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgKXtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMudG9kb0xpc3QgPSBbXTtcbiAgICB9XG59XG5cbmNsYXNzIFRvRG8ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBuYW1lLFxuICAgICAgICBkdWVEYXRlLFxuICAgICAgICBjb21wbGV0ZSxcbiAgICAgICAgcHJpb3JpdHlcbiAgICApe1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgICAgICB0aGlzLmNvbXBsZXRlID0gY29tcGxldGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eVxuICAgIH1cbn1cblxuY29uc3QgY3JlYXRlUHJvamVjdCA9IChuYW1lLCBkZXNjcmlwdGlvbikgPT4ge1xuICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChuYW1lLCBkZXNjcmlwdGlvbik7XG4gICAgdXBkYXRlUHJvamVjdHNBcnJheShuZXdQcm9qZWN0KTtcbiAgICByZXR1cm4gbmV3UHJvamVjdDtcbn1cblxuUHJvamVjdC5wcm90b3R5cGUuYWRkVG9EbyA9IGZ1bmN0aW9uIChuYW1lLCBkdWVEYXRlLCBzdGF0dXMsIHByaW9yaXR5KSB7XG4gICAgY29uc3QgdG9EbyA9IG5ldyBUb0RvIChuYW1lLCBkdWVEYXRlLCBzdGF0dXMsIHByaW9yaXR5KTtcbiAgICB0aGlzLnRvZG9MaXN0LnB1c2godG9Ebyk7XG59XG5cblByb2plY3QucHJvdG90eXBlLnJlbW92ZVRhc2sgPSBmdW5jdGlvbiAodGFza19pbmRleCkge1xuICAgIHRoaXMudG9kb0xpc3Quc3BsaWNlKHRhc2tfaW5kZXgsMSk7XG59XG5cbmNvbnN0IHVwZGF0ZVByb2plY3RzQXJyYXkgPSBuZXdQcm9qZWN0ID0+IHtcbiAgICBwcm9qZWN0cy5wdXNoKG5ld1Byb2plY3QpO1xufVxuXG5jb25zdCBkZWxldGVQcm9qZWN0ID0gKHByb2plY3RJbmRleCkgPT4ge1xuICAgIHByb2plY3RzLnNwbGljZShwcm9qZWN0SW5kZXgsMSk7XG4gICAgcmVuZGVyUHJvamVjdHMoKTtcbn1cblxuY29uc3QgZGVsZXRlVGFzayA9IChwcm9qZWN0SW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgIHByb2plY3RzW3Byb2plY3RJbmRleF0udG9kb0xpc3Quc3BsaWNlKHRhc2tJbmRleCwxKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUHJvamVjdCwgcHJvamVjdHMsIGRlbGV0ZVByb2plY3QsIGRlbGV0ZVRhc2sgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGNvbXBhcmVBc2NcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gLTEsIDAgb3IgMS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIDEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCxcbiAqIC0xIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIG9yIDAgaWYgZGF0ZXMgYXJlIGVxdWFsLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHJlc3VsdCBvZiB0aGUgY29tcGFyaXNvblxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb21wYXJlIDExIEZlYnJ1YXJ5IDE5ODcgYW5kIDEwIEp1bHkgMTk4OTpcbiAqIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVBc2MobmV3IERhdGUoMTk4NywgMSwgMTEpLCBuZXcgRGF0ZSgxOTg5LCA2LCAxMCkpXG4gKiAvLz0+IC0xXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFNvcnQgdGhlIGFycmF5IG9mIGRhdGVzOlxuICogY29uc3QgcmVzdWx0ID0gW1xuICogICBuZXcgRGF0ZSgxOTk1LCA2LCAyKSxcbiAqICAgbmV3IERhdGUoMTk4NywgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgxOTg5LCA2LCAxMClcbiAqIF0uc29ydChjb21wYXJlQXNjKVxuICogLy89PiBbXG4gKiAvLyAgIFdlZCBGZWIgMTEgMTk4NyAwMDowMDowMCxcbiAqIC8vICAgTW9uIEp1bCAxMCAxOTg5IDAwOjAwOjAwLFxuICogLy8gICBTdW4gSnVsIDAyIDE5OTUgMDA6MDA6MDBcbiAqIC8vIF1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wYXJlQXNjKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgZGlmZiA9IGRhdGVMZWZ0LmdldFRpbWUoKSAtIGRhdGVSaWdodC5nZXRUaW1lKCk7XG5cbiAgaWYgKGRpZmYgPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgcmV0dXJuIDE7IC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgbW9udGhzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIG1vbnRocyBhcmUgYmV0d2VlbiAzMSBKYW51YXJ5IDIwMTQgYW5kIDEgU2VwdGVtYmVyIDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDgsIDEpLFxuICogICBuZXcgRGF0ZSgyMDE0LCAwLCAzMSlcbiAqIClcbiAqIC8vPT4gOFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgeWVhckRpZmYgPSBkYXRlTGVmdC5nZXRGdWxsWWVhcigpIC0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCk7XG4gIHZhciBtb250aERpZmYgPSBkYXRlTGVmdC5nZXRNb250aCgpIC0gZGF0ZVJpZ2h0LmdldE1vbnRoKCk7XG4gIHJldHVybiB5ZWFyRGlmZiAqIDEyICsgbW9udGhEaWZmO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgZW5kIG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGVuZE9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZW5kIG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBtb250aCBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAzMCAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mTW9udGgoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aCArIDEsIDApO1xuICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGVuZE9mRGF5IGZyb20gXCIuLi9lbmRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IGVuZE9mTW9udGggZnJvbSBcIi4uL2VuZE9mTW9udGgvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzTGFzdERheU9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0aGUgbGFzdCBkYXkgb2YgYSBtb250aD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAyOCBGZWJydWFyeSAyMDE0IHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICogdmFyIHJlc3VsdCA9IGlzTGFzdERheU9mTW9udGgobmV3IERhdGUoMjAxNCwgMSwgMjgpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXN0RGF5T2ZNb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiBlbmRPZkRheShkYXRlKS5nZXRUaW1lKCkgPT09IGVuZE9mTW9udGgoZGF0ZSkuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbXBhcmVBc2MgZnJvbSBcIi4uL2NvbXBhcmVBc2MvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgaXNMYXN0RGF5T2ZNb250aCBmcm9tIFwiLi4vaXNMYXN0RGF5T2ZNb250aC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5Nb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBmdWxsIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGZ1bGwgbW9udGhzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIHVzaW5nIHRydW5jIGFzIGEgZGVmYXVsdCByb3VuZGluZyBtZXRob2QuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGZ1bGwgbW9udGhzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGZ1bGwgbW9udGhzIGFyZSBiZXR3ZWVuIDMxIEphbnVhcnkgMjAxNCBhbmQgMSBTZXB0ZW1iZXIgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1vbnRocyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgbmV3IERhdGUoMjAxNCwgMCwgMzEpKVxuICogLy89PiA3XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTW9udGhzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgc2lnbiA9IGNvbXBhcmVBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gIHZhciBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkpO1xuICB2YXIgcmVzdWx0OyAvLyBDaGVjayBmb3IgdGhlIGRpZmZlcmVuY2Ugb2YgbGVzcyB0aGFuIG1vbnRoXG5cbiAgaWYgKGRpZmZlcmVuY2UgPCAxKSB7XG4gICAgcmVzdWx0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZGF0ZUxlZnQuZ2V0TW9udGgoKSA9PT0gMSAmJiBkYXRlTGVmdC5nZXREYXRlKCkgPiAyNykge1xuICAgICAgLy8gVGhpcyB3aWxsIGNoZWNrIGlmIHRoZSBkYXRlIGlzIGVuZCBvZiBGZWIgYW5kIGFzc2lnbiBhIGhpZ2hlciBlbmQgb2YgbW9udGggZGF0ZVxuICAgICAgLy8gdG8gY29tcGFyZSBpdCB3aXRoIEphblxuICAgICAgZGF0ZUxlZnQuc2V0RGF0ZSgzMCk7XG4gICAgfVxuXG4gICAgZGF0ZUxlZnQuc2V0TW9udGgoZGF0ZUxlZnQuZ2V0TW9udGgoKSAtIHNpZ24gKiBkaWZmZXJlbmNlKTsgLy8gTWF0aC5hYnMoZGlmZiBpbiBmdWxsIG1vbnRocyAtIGRpZmYgaW4gY2FsZW5kYXIgbW9udGhzKSA9PT0gMSBpZiBsYXN0IGNhbGVuZGFyIG1vbnRoIGlzIG5vdCBmdWxsXG4gICAgLy8gSWYgc28sIHJlc3VsdCBtdXN0IGJlIGRlY3JlYXNlZCBieSAxIGluIGFic29sdXRlIHZhbHVlXG5cbiAgICB2YXIgaXNMYXN0TW9udGhOb3RGdWxsID0gY29tcGFyZUFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gLXNpZ247IC8vIENoZWNrIGZvciBjYXNlcyBvZiBvbmUgZnVsbCBjYWxlbmRhciBtb250aFxuXG4gICAgaWYgKGlzTGFzdERheU9mTW9udGgodG9EYXRlKGRpcnR5RGF0ZUxlZnQpKSAmJiBkaWZmZXJlbmNlID09PSAxICYmIGNvbXBhcmVBc2MoZGlydHlEYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gMSkge1xuICAgICAgaXNMYXN0TW9udGhOb3RGdWxsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gTnVtYmVyKGlzTGFzdE1vbnRoTm90RnVsbCkpO1xuICB9IC8vIFByZXZlbnQgbmVnYXRpdmUgemVyb1xuXG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCA/IDAgOiByZXN1bHQ7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDE0IDEyOjMwOjIwLjYwMCBhbmQgMiBKdWx5IDIwMTQgMTI6MzA6MjEuNzAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIxLCA3MDApLFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCA2MDApXG4gKiApXG4gKiAvLz0+IDExMDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRvRGF0ZShkYXRlTGVmdCkuZ2V0VGltZSgpIC0gdG9EYXRlKGRhdGVSaWdodCkuZ2V0VGltZSgpO1xufSIsInZhciByb3VuZGluZ01hcCA9IHtcbiAgY2VpbDogTWF0aC5jZWlsLFxuICByb3VuZDogTWF0aC5yb3VuZCxcbiAgZmxvb3I6IE1hdGguZmxvb3IsXG4gIHRydW5jOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCAwID8gTWF0aC5jZWlsKHZhbHVlKSA6IE1hdGguZmxvb3IodmFsdWUpO1xuICB9IC8vIE1hdGgudHJ1bmMgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXG59O1xudmFyIGRlZmF1bHRSb3VuZGluZ01ldGhvZCA9ICd0cnVuYyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91bmRpbmdNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiBtZXRob2QgPyByb3VuZGluZ01hcFttZXRob2RdIDogcm91bmRpbmdNYXBbZGVmYXVsdFJvdW5kaW5nTWV0aG9kXTtcbn0iLCJpbXBvcnQgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRSb3VuZGluZ01ldGhvZCB9IGZyb20gXCIuLi9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5TZWNvbmRzXG4gKiBAY2F0ZWdvcnkgU2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucm91bmRpbmdNZXRob2Q9J3RydW5jJ10gLSBhIHJvdW5kaW5nIG1ldGhvZCAoYGNlaWxgLCBgZmxvb3JgLCBgcm91bmRgIG9yIGB0cnVuY2ApXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIHNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgc2Vjb25kcyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTQgMTI6MzA6MDcuOTk5IGFuZCAyIEp1bHkgMjAxNCAxMjozMDoyMC4wMDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCA3LCA5OTkpXG4gKiApXG4gKiAvLz0+IDEyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluU2Vjb25kcyhkYXRlTGVmdCwgZGF0ZVJpZ2h0LCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGlmZiA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSAvIDEwMDA7XG4gIHJldHVybiBnZXRSb3VuZGluZ01ldGhvZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm91bmRpbmdNZXRob2QpKGRpZmYpO1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcblxudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGFzc2lnbiBmcm9tIFwiLi4vYXNzaWduL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZU9iamVjdChkaXJ0eU9iamVjdCkge1xuICByZXR1cm4gYXNzaWduKHt9LCBkaXJ0eU9iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgZGlydHlPYmplY3QpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXNzaWduIHJlcXVpcmVzIHRoYXQgaW5wdXQgcGFyYW1ldGVyIG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgZGlydHlPYmplY3QgPSBkaXJ0eU9iamVjdCB8fCB7fTtcblxuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkaXJ0eU9iamVjdCkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGlydHlPYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IGRpcnR5T2JqZWN0W3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsImltcG9ydCBjb21wYXJlQXNjIGZyb20gXCIuLi9jb21wYXJlQXNjL2luZGV4LmpzXCI7XG5pbXBvcnQgZGlmZmVyZW5jZUluTW9udGhzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5Nb250aHMvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5TZWNvbmRzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5TZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBjbG9uZU9iamVjdCBmcm9tIFwiLi4vX2xpYi9jbG9uZU9iamVjdC9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSU5VVEVTX0lOX0RBWSA9IDE0NDA7XG52YXIgTUlOVVRFU19JTl9BTE1PU1RfVFdPX0RBWVMgPSAyNTIwO1xudmFyIE1JTlVURVNfSU5fTU9OVEggPSA0MzIwMDtcbnZhciBNSU5VVEVTX0lOX1RXT19NT05USFMgPSA4NjQwMDtcbi8qKlxuICogQG5hbWUgZm9ybWF0RGlzdGFuY2VcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3Jkcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMgaW4gd29yZHMuXG4gKlxuICogfCBEaXN0YW5jZSBiZXR3ZWVuIGRhdGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJlc3VsdCAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAwIC4uLiAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgfFxuICogfCAzMCBzZWNzIC4uLiAxIG1pbiAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDEgbWludXRlICAgICAgICAgICAgfFxuICogfCAxIG1pbiAzMCBzZWNzIC4uLiA0NCBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFsyLi40NF0gbWludXRlcyAgICAgfFxuICogfCA0NCBtaW5zIC4uLiAzMCBzZWNzIC4uLiA4OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IDEgaG91ciAgICAgICAgfFxuICogfCA4OSBtaW5zIDMwIHNlY3MgLi4uIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IFsyLi4yNF0gaG91cnMgfFxuICogfCAyMyBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiA0MSBocnMgNTkgbWlucyAzMCBzZWNzICAgICAgICAgICAgICAgICB8IDEgZGF5ICAgICAgICAgICAgICAgfFxuICogfCA0MSBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiAyOSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICB8IFsyLi4zMF0gZGF5cyAgICAgICAgfFxuICogfCAyOSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyB8IGFib3V0IDEgbW9udGggICAgICAgfFxuICogfCA0NCBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyB8IGFib3V0IDIgbW9udGhzICAgICAgfFxuICogfCA1OSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDEgeXIgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFsyLi4xMl0gbW9udGhzICAgICAgfFxuICogfCAxIHlyIC4uLiAxIHlyIDMgbW9udGhzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IDEgeWVhciAgICAgICAgfFxuICogfCAxIHlyIDMgbW9udGhzIC4uLiAxIHlyIDkgbW9udGggcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG92ZXIgMSB5ZWFyICAgICAgICAgfFxuICogfCAxIHlyIDkgbW9udGhzIC4uLiAyIHlycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFsbW9zdCAyIHllYXJzICAgICAgfFxuICogfCBOIHlycyAuLi4gTiB5cnMgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IE4geWVhcnMgICAgICAgfFxuICogfCBOIHlycyAzIG1vbnRocyAuLi4gTiB5cnMgOSBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG92ZXIgTiB5ZWFycyAgICAgICAgfFxuICogfCBOIHlycyA5IG1vbnRocyAuLi4gTisxIHlycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFsbW9zdCBOKzEgeWVhcnMgICAgfFxuICpcbiAqIFdpdGggYG9wdGlvbnMuaW5jbHVkZVNlY29uZHMgPT0gdHJ1ZWA6XG4gKiB8IERpc3RhbmNlIGJldHdlZW4gZGF0ZXMgfCBSZXN1bHQgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgc2VjcyAuLi4gNSBzZWNzICAgICAgfCBsZXNzIHRoYW4gNSBzZWNvbmRzICB8XG4gKiB8IDUgc2VjcyAuLi4gMTAgc2VjcyAgICAgfCBsZXNzIHRoYW4gMTAgc2Vjb25kcyB8XG4gKiB8IDEwIHNlY3MgLi4uIDIwIHNlY3MgICAgfCBsZXNzIHRoYW4gMjAgc2Vjb25kcyB8XG4gKiB8IDIwIHNlY3MgLi4uIDQwIHNlY3MgICAgfCBoYWxmIGEgbWludXRlICAgICAgICB8XG4gKiB8IDQwIHNlY3MgLi4uIDYwIHNlY3MgICAgfCBsZXNzIHRoYW4gYSBtaW51dGUgICB8XG4gKiB8IDYwIHNlY3MgLi4uIDkwIHNlY3MgICAgfCAxIG1pbnV0ZSAgICAgICAgICAgICB8XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCBmcm9tIGBkaXN0YW5jZUluV29yZHMgYCB0byBgZm9ybWF0RGlzdGFuY2VgXG4gKiAgIHRvIG1ha2UgaXRzIG5hbWUgY29uc2lzdGVudCB3aXRoIGBmb3JtYXRgIGFuZCBgZm9ybWF0UmVsYXRpdmVgLlxuICpcbiAqIC0gVGhlIG9yZGVyIG9mIGFyZ3VtZW50cyBpcyBzd2FwcGVkIHRvIG1ha2UgdGhlIGZ1bmN0aW9uXG4gKiAgIGNvbnNpc3RlbnQgd2l0aCBgZGlmZmVyZW5jZUluLi4uYCBmdW5jdGlvbnMuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGRpc3RhbmNlSW5Xb3JkcyhcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzIsIDApLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDExLCAzMiwgMCksXG4gKiAgICAgeyBhZGRTdWZmaXg6IHRydWUgfVxuICogICApIC8vPT4gJ2luIGFib3V0IDEgaG91cidcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGZvcm1hdERpc3RhbmNlKFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDExLCAzMiwgMCksXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMyLCAwKSxcbiAqICAgICB7IGFkZFN1ZmZpeDogdHJ1ZSB9XG4gKiAgICkgLy89PiAnaW4gYWJvdXQgMSBob3VyJ1xuICogICBgYGBcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGJhc2VEYXRlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW5jbHVkZVNlY29uZHM9ZmFsc2VdIC0gZGlzdGFuY2VzIGxlc3MgdGhhbiBhIG1pbnV0ZSBhcmUgbW9yZSBkZXRhaWxlZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5hZGRTdWZmaXg9ZmFsc2VdIC0gcmVzdWx0IGluZGljYXRlcyBpZiB0aGUgc2Vjb25kIGRhdGUgaXMgZWFybGllciBvciBsYXRlciB0aGFuIHRoZSBmaXJzdFxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZGlzdGFuY2UgaW4gd29yZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBiYXNlRGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0RGlzdGFuY2VgIHByb3BlcnR5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMiBKdWx5IDIwMTQgYW5kIDEgSmFudWFyeSAyMDE1P1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UobmV3IERhdGUoMjAxNCwgNiwgMiksIG5ldyBEYXRlKDIwMTUsIDAsIDEpKVxuICogLy89PiAnNiBtb250aHMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMSBKYW51YXJ5IDIwMTUgMDA6MDA6MTVcbiAqIC8vIGFuZCAxIEphbnVhcnkgMjAxNSAwMDowMDowMCwgaW5jbHVkaW5nIHNlY29uZHM/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMTUpLFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAwKSxcbiAqICAgeyBpbmNsdWRlU2Vjb25kczogdHJ1ZSB9XG4gKiApXG4gKiAvLz0+ICdsZXNzIHRoYW4gMjAgc2Vjb25kcydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgZnJvbSAxIEphbnVhcnkgMjAxNlxuICogLy8gdG8gMSBKYW51YXJ5IDIwMTUsIHdpdGggYSBzdWZmaXg/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShuZXcgRGF0ZSgyMDE1LCAwLCAxKSwgbmV3IERhdGUoMjAxNiwgMCwgMSksIHtcbiAqICAgYWRkU3VmZml4OiB0cnVlXG4gKiB9KVxuICogLy89PiAnYWJvdXQgMSB5ZWFyIGFnbydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAxIEF1Z3VzdCAyMDE2IGFuZCAxIEphbnVhcnkgMjAxNSBpbiBFc3BlcmFudG8/XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKG5ldyBEYXRlKDIwMTYsIDcsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAncGxpIG9sIDEgamFybydcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZShkaXJ0eURhdGUsIGRpcnR5QmFzZURhdGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0RGlzdGFuY2UpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXREaXN0YW5jZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIGNvbXBhcmlzb24gPSBjb21wYXJlQXNjKGRpcnR5RGF0ZSwgZGlydHlCYXNlRGF0ZSk7XG5cbiAgaWYgKGlzTmFOKGNvbXBhcmlzb24pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgdmFyIGxvY2FsaXplT3B0aW9ucyA9IGNsb25lT2JqZWN0KG9wdGlvbnMpO1xuICBsb2NhbGl6ZU9wdGlvbnMuYWRkU3VmZml4ID0gQm9vbGVhbihvcHRpb25zLmFkZFN1ZmZpeCk7XG4gIGxvY2FsaXplT3B0aW9ucy5jb21wYXJpc29uID0gY29tcGFyaXNvbjtcbiAgdmFyIGRhdGVMZWZ0O1xuICB2YXIgZGF0ZVJpZ2h0O1xuXG4gIGlmIChjb21wYXJpc29uID4gMCkge1xuICAgIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5QmFzZURhdGUpO1xuICAgIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB9IGVsc2Uge1xuICAgIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gICAgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5QmFzZURhdGUpO1xuICB9XG5cbiAgdmFyIHNlY29uZHMgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKGRhdGVSaWdodCwgZGF0ZUxlZnQpO1xuICB2YXIgb2Zmc2V0SW5TZWNvbmRzID0gKGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZVJpZ2h0KSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQpKSAvIDEwMDA7XG4gIHZhciBtaW51dGVzID0gTWF0aC5yb3VuZCgoc2Vjb25kcyAtIG9mZnNldEluU2Vjb25kcykgLyA2MCk7XG4gIHZhciBtb250aHM7IC8vIDAgdXAgdG8gMiBtaW5zXG5cbiAgaWYgKG1pbnV0ZXMgPCAyKSB7XG4gICAgaWYgKG9wdGlvbnMuaW5jbHVkZVNlY29uZHMpIHtcbiAgICAgIGlmIChzZWNvbmRzIDwgNSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdsZXNzVGhhblhTZWNvbmRzJywgNSwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDEwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWFNlY29uZHMnLCAxMCwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDIwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWFNlY29uZHMnLCAyMCwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDQwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2hhbGZBTWludXRlJywgbnVsbCwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWE1pbnV0ZXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1pbnV0ZXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdsZXNzVGhhblhNaW51dGVzJywgMSwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNaW51dGVzJywgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IC8vIDIgbWlucyB1cCB0byAwLjc1IGhyc1xuXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IDQ1KSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1pbnV0ZXMnLCBtaW51dGVzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAwLjc1IGhycyB1cCB0byAxLjUgaHJzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IDkwKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWJvdXRYSG91cnMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxLjUgaHJzIHVwIHRvIDI0IGhyc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX0RBWSkge1xuICAgIHZhciBob3VycyA9IE1hdGgucm91bmQobWludXRlcyAvIDYwKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhIb3VycycsIGhvdXJzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIGRheSB1cCB0byAxLjc1IGRheXNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9BTE1PU1RfVFdPX0RBWVMpIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4RGF5cycsIDEsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEuNzUgZGF5cyB1cCB0byAzMCBkYXlzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fTU9OVEgpIHtcbiAgICB2YXIgZGF5cyA9IE1hdGgucm91bmQobWludXRlcyAvIE1JTlVURVNfSU5fREFZKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4RGF5cycsIGRheXMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgbW9udGggdXAgdG8gMiBtb250aHNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9UV09fTU9OVEhTKSB7XG4gICAgbW9udGhzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gTUlOVVRFU19JTl9NT05USCk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWJvdXRYTW9udGhzJywgbW9udGhzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICB9XG5cbiAgbW9udGhzID0gZGlmZmVyZW5jZUluTW9udGhzKGRhdGVSaWdodCwgZGF0ZUxlZnQpOyAvLyAyIG1vbnRocyB1cCB0byAxMiBtb250aHNcblxuICBpZiAobW9udGhzIDwgMTIpIHtcbiAgICB2YXIgbmVhcmVzdE1vbnRoID0gTWF0aC5yb3VuZChtaW51dGVzIC8gTUlOVVRFU19JTl9NT05USCk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1vbnRocycsIG5lYXJlc3RNb250aCwgbG9jYWxpemVPcHRpb25zKTsgLy8gMSB5ZWFyIHVwIHRvIG1heCBEYXRlXG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPSBtb250aHMgJSAxMjtcbiAgICB2YXIgeWVhcnMgPSBNYXRoLmZsb29yKG1vbnRocyAvIDEyKTsgLy8gTiB5ZWFycyB1cCB0byAxIHllYXJzIDMgbW9udGhzXG5cbiAgICBpZiAobW9udGhzU2luY2VTdGFydE9mWWVhciA8IDMpIHtcbiAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2Fib3V0WFllYXJzJywgeWVhcnMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIE4geWVhcnMgMyBtb250aHMgdXAgdG8gTiB5ZWFycyA5IG1vbnRoc1xuICAgIH0gZWxzZSBpZiAobW9udGhzU2luY2VTdGFydE9mWWVhciA8IDkpIHtcbiAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ292ZXJYWWVhcnMnLCB5ZWFycywgbG9jYWxpemVPcHRpb25zKTsgLy8gTiB5ZWFycyA5IG1vbnRocyB1cCB0byBOIHllYXIgMTIgbW9udGhzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2FsbW9zdFhZZWFycycsIHllYXJzICsgMSwgbG9jYWxpemVPcHRpb25zKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgZGlzdGFuY2VJbldvcmRzIGZyb20gXCIuLi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZm9ybWF0RGlzdGFuY2VUb05vd1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGUgYW5kIG5vdyBpbiB3b3Jkcy5cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGUgYW5kIG5vdyBpbiB3b3Jkcy5cbiAqXG4gKiB8IERpc3RhbmNlIHRvIG5vdyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUmVzdWx0ICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGVzcyB0aGFuIGEgbWludXRlICB8XG4gKiB8IDMwIHNlY3MgLi4uIDEgbWluIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMSBtaW51dGUgICAgICAgICAgICB8XG4gKiB8IDEgbWluIDMwIHNlY3MgLi4uIDQ0IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjQ0XSBtaW51dGVzICAgICB8XG4gKiB8IDQ0IG1pbnMgLi4uIDMwIHNlY3MgLi4uIDg5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSBob3VyICAgICAgICB8XG4gKiB8IDg5IG1pbnMgMzAgc2VjcyAuLi4gMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgWzIuLjI0XSBob3VycyB8XG4gKiB8IDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgIHwgMSBkYXkgICAgICAgICAgICAgICB8XG4gKiB8IDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgIHwgWzIuLjMwXSBkYXlzICAgICAgICB8XG4gKiB8IDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNDQgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMSBtb250aCAgICAgICB8XG4gKiB8IDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNTkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMiBtb250aHMgICAgICB8XG4gKiB8IDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gMSB5ciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjEyXSBtb250aHMgICAgICB8XG4gKiB8IDEgeXIgLi4uIDEgeXIgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSB5ZWFyICAgICAgICB8XG4gKiB8IDEgeXIgMyBtb250aHMgLi4uIDEgeXIgOSBtb250aCBzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciAxIHllYXIgICAgICAgICB8XG4gKiB8IDEgeXIgOSBtb250aHMgLi4uIDIgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IDIgeWVhcnMgICAgICB8XG4gKiB8IE4geXJzIC4uLiBOIHlycyAzIG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgTiB5ZWFycyAgICAgICB8XG4gKiB8IE4geXJzIDMgbW9udGhzIC4uLiBOIHlycyA5IG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciBOIHllYXJzICAgICAgICB8XG4gKiB8IE4geXJzIDkgbW9udGhzIC4uLiBOKzEgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IE4rMSB5ZWFycyAgICB8XG4gKlxuICogV2l0aCBgb3B0aW9ucy5pbmNsdWRlU2Vjb25kcyA9PSB0cnVlYDpcbiAqIHwgRGlzdGFuY2UgdG8gbm93ICAgICB8IFJlc3VsdCAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCBzZWNzIC4uLiA1IHNlY3MgICB8IGxlc3MgdGhhbiA1IHNlY29uZHMgIHxcbiAqIHwgNSBzZWNzIC4uLiAxMCBzZWNzICB8IGxlc3MgdGhhbiAxMCBzZWNvbmRzIHxcbiAqIHwgMTAgc2VjcyAuLi4gMjAgc2VjcyB8IGxlc3MgdGhhbiAyMCBzZWNvbmRzIHxcbiAqIHwgMjAgc2VjcyAuLi4gNDAgc2VjcyB8IGhhbGYgYSBtaW51dGUgICAgICAgIHxcbiAqIHwgNDAgc2VjcyAuLi4gNjAgc2VjcyB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgIHxcbiAqIHwgNjAgc2VjcyAuLi4gOTAgc2VjcyB8IDEgbWludXRlICAgICAgICAgICAgIHxcbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCBmcm9tIGBkaXN0YW5jZUluV29yZHNUb05vdyBgIHRvIGBmb3JtYXREaXN0YW5jZVRvTm93YFxuICogICB0byBtYWtlIGl0cyBuYW1lIGNvbnNpc3RlbnQgd2l0aCBgZm9ybWF0YCBhbmQgYGZvcm1hdFJlbGF0aXZlYC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICpcbiAqICAgZGlzdGFuY2VJbldvcmRzVG9Ob3cobmV3IERhdGUoMjAxNCwgNiwgMiksIHsgYWRkU3VmZml4OiB0cnVlIH0pXG4gKiAgIC8vPT4gJ2luIDYgbW9udGhzJ1xuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICpcbiAqICAgZm9ybWF0RGlzdGFuY2VUb05vdyhuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgeyBhZGRTdWZmaXg6IHRydWUgfSlcbiAqICAgLy89PiAnaW4gNiBtb250aHMnXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVTZWNvbmRzPWZhbHNlXSAtIGRpc3RhbmNlcyBsZXNzIHRoYW4gYSBtaW51dGUgYXJlIG1vcmUgZGV0YWlsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWRkU3VmZml4PWZhbHNlXSAtIHJlc3VsdCBzcGVjaWZpZXMgaWYgbm93IGlzIGVhcmxpZXIgb3IgbGF0ZXIgdGhhbiB0aGUgcGFzc2VkIGRhdGVcbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGRpc3RhbmNlIGluIHdvcmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXREaXN0YW5jZWAgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgMSBKYW51YXJ5IDIwMTUsIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDIgSnVseSAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlVG9Ob3coXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIpXG4gKiApXG4gKiAvLz0+ICc2IG1vbnRocydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgbm93IGlzIDEgSmFudWFyeSAyMDE1IDAwOjAwOjAwLFxuICogLy8gd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMSBKYW51YXJ5IDIwMTUgMDA6MDA6MTUsIGluY2x1ZGluZyBzZWNvbmRzP1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlVG9Ob3coXG4gKiAgIG5ldyBEYXRlKDIwMTUsIDAsIDEsIDAsIDAsIDE1KSxcbiAqICAge2luY2x1ZGVTZWNvbmRzOiB0cnVlfVxuICogKVxuICogLy89PiAnbGVzcyB0aGFuIDIwIHNlY29uZHMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDEgSmFudWFyeSAyMDE1LFxuICogLy8gd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMSBKYW51YXJ5IDIwMTYsIHdpdGggYSBzdWZmaXg/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vdyhcbiAqICAgbmV3IERhdGUoMjAxNiwgMCwgMSksXG4gKiAgIHthZGRTdWZmaXg6IHRydWV9XG4gKiApXG4gKiAvLz0+ICdpbiBhYm91dCAxIHllYXInXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDEgSmFudWFyeSAyMDE1LFxuICogLy8gd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMSBBdWd1c3QgMjAxNiBpbiBFc3BlcmFudG8/XG4gKiB2YXIgZW9Mb2NhbGUgPSByZXF1aXJlKCdkYXRlLWZucy9sb2NhbGUvZW8nKVxuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlVG9Ob3coXG4gKiAgIG5ldyBEYXRlKDIwMTYsIDcsIDEpLFxuICogICB7bG9jYWxlOiBlb0xvY2FsZX1cbiAqIClcbiAqIC8vPT4gJ3BsaSBvbCAxIGphcm8nXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2VUb05vdyhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGRpc3RhbmNlSW5Xb3JkcyhkaXJ0eURhdGUsIERhdGUubm93KCksIGRpcnR5T3B0aW9ucyk7XG59IiwiLyoqXG4gKiBEYXlzIGluIDEgd2Vlay5cbiAqXG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJbldlZWsgPSA3O1xuLyoqXG4gKiBNYXhpbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtYXhUaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWF4VGltZSA9IE1hdGgucG93KDEwLCA4KSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luSG91ciA9IDM2MDAwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIHNlY29uZFxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5TZWNvbmQgPSAxMDAwO1xuLyoqXG4gKiBNaW5pbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtaW5UaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWluVGltZSA9IC1tYXhUaW1lO1xuLyoqXG4gKiBNaW51dGVzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaW51dGVzSW5Ib3VyID0gNjA7XG4vKipcbiAqIE1vbnRocyBpbiAxIHF1YXJ0ZXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtb250aHNJblF1YXJ0ZXIgPSAzO1xuLyoqXG4gKiBNb250aHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgbW9udGhzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbW9udGhzSW5ZZWFyID0gMTI7XG4vKipcbiAqIFF1YXJ0ZXJzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIHF1YXJ0ZXJzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgcXVhcnRlcnNJblllYXIgPSA0O1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbk1pbnV0ZSA9IDYwOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyLCBtaWxsaXNlY29uZHNJbk1pbnV0ZSB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBwYXJzZUlTT1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSBJU08gc3RyaW5nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIGluIElTTyA4NjAxIGZvcm1hdCBhbmQgcmV0dXJuIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogRnVuY3Rpb24gYWNjZXB0cyBjb21wbGV0ZSBJU08gODYwMSBmb3JtYXRzIGFzIHdlbGwgYXMgcGFydGlhbCBpbXBsZW1lbnRhdGlvbnMuXG4gKiBJU08gODYwMTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMVxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpc24ndCBhIHN0cmluZywgdGhlIGZ1bmN0aW9uIGNhbm5vdCBwYXJzZSB0aGUgc3RyaW5nIG9yXG4gKiB0aGUgdmFsdWVzIGFyZSBpbnZhbGlkLCBpdCByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIHByZXZpb3VzIGBwYXJzZWAgaW1wbGVtZW50YXRpb24gd2FzIHJlbmFtZWQgdG8gYHBhcnNlSVNPYC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBwYXJzZSgnMjAxNi0wMS0wMScpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKiAgIHBhcnNlSVNPKCcyMDE2LTAxLTAxJylcbiAqICAgYGBgXG4gKlxuICogLSBgcGFyc2VJU09gIG5vdyB2YWxpZGF0ZXMgc2VwYXJhdGUgZGF0ZSBhbmQgdGltZSB2YWx1ZXMgaW4gSVNPLTg2MDEgc3RyaW5nc1xuICogICBhbmQgcmV0dXJucyBgSW52YWxpZCBEYXRlYCBpZiB0aGUgZGF0ZSBpcyBpbnZhbGlkLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICBwYXJzZUlTTygnMjAxOC0xMy0zMicpXG4gKiAgIC8vPT4gSW52YWxpZCBEYXRlXG4gKiAgIGBgYFxuICpcbiAqIC0gYHBhcnNlSVNPYCBub3cgZG9lc24ndCBmYWxsIGJhY2sgdG8gYG5ldyBEYXRlYCBjb25zdHJ1Y3RvclxuICogICBpZiBpdCBmYWlscyB0byBwYXJzZSBhIHN0cmluZyBhcmd1bWVudC4gSW5zdGVhZCwgaXQgcmV0dXJucyBgSW52YWxpZCBEYXRlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0gezB8MXwyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzYCBtdXN0IGJlIDAsIDEgb3IgMlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcrMDIwMTQxMDEnIHRvIGRhdGUsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUlTTyhhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMgPT0gbnVsbCA/IDIgOiB0b0ludGVnZXIob3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzKTtcblxuICBpZiAoYWRkaXRpb25hbERpZ2l0cyAhPT0gMiAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAxICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYWRkaXRpb25hbERpZ2l0cyBtdXN0IGJlIDAsIDEgb3IgMicpO1xuICB9XG5cbiAgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBkYXRlO1xuXG4gIGlmIChkYXRlU3RyaW5ncy5kYXRlKSB7XG4gICAgdmFyIHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKTtcbiAgICBkYXRlID0gcGFyc2VEYXRlKHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZywgcGFyc2VZZWFyUmVzdWx0LnllYXIpO1xuICB9XG5cbiAgaWYgKCFkYXRlIHx8IGlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgdGltZSA9IDA7XG4gIHZhciBvZmZzZXQ7XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWUpIHtcbiAgICB0aW1lID0gcGFyc2VUaW1lKGRhdGVTdHJpbmdzLnRpbWUpO1xuXG4gICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZXpvbmUpIHtcbiAgICBvZmZzZXQgPSBwYXJzZVRpbWV6b25lKGRhdGVTdHJpbmdzLnRpbWV6b25lKTtcblxuICAgIGlmIChpc05hTihvZmZzZXQpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRpcnR5RGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpOyAvLyBqcyBwYXJzZWQgc3RyaW5nIGFzc3VtaW5nIGl0J3MgaW4gVVRDIHRpbWV6b25lXG4gICAgLy8gYnV0IHdlIG5lZWQgaXQgdG8gYmUgcGFyc2VkIGluIG91ciB0aW1lem9uZVxuICAgIC8vIHNvIHdlIHVzZSB1dGMgdmFsdWVzIHRvIGJ1aWxkIGRhdGUgaW4gb3VyIHRpbWV6b25lLlxuICAgIC8vIFllYXIgdmFsdWVzIGZyb20gMCB0byA5OSBtYXAgdG8gdGhlIHllYXJzIDE5MDAgdG8gMTk5OVxuICAgIC8vIHNvIHNldCB5ZWFyIGV4cGxpY2l0bHkgd2l0aCBzZXRGdWxsWWVhci5cblxuICAgIHZhciByZXN1bHQgPSBuZXcgRGF0ZSgwKTtcbiAgICByZXN1bHQuc2V0RnVsbFllYXIoZGlydHlEYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRpcnR5RGF0ZS5nZXRVVENNb250aCgpLCBkaXJ0eURhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXN1bHQuc2V0SG91cnMoZGlydHlEYXRlLmdldFVUQ0hvdXJzKCksIGRpcnR5RGF0ZS5nZXRVVENNaW51dGVzKCksIGRpcnR5RGF0ZS5nZXRVVENTZWNvbmRzKCksIGRpcnR5RGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lICsgb2Zmc2V0KTtcbn1cbnZhciBwYXR0ZXJucyA9IHtcbiAgZGF0ZVRpbWVEZWxpbWl0ZXI6IC9bVCBdLyxcbiAgdGltZVpvbmVEZWxpbWl0ZXI6IC9bWiBdL2ksXG4gIHRpbWV6b25lOiAvKFtaKy1dLiopJC9cbn07XG52YXIgZGF0ZVJlZ2V4ID0gL14tPyg/OihcXGR7M30pfChcXGR7Mn0pKD86LT8oXFxkezJ9KSk/fFcoXFxkezJ9KSg/Oi0/KFxcZHsxfSkpP3wpJC87XG52YXIgdGltZVJlZ2V4ID0gL14oXFxkezJ9KD86Wy4sXVxcZCopPykoPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/KD86Oj8oXFxkezJ9KD86Wy4sXVxcZCopPykpPyQvO1xudmFyIHRpbWV6b25lUmVnZXggPSAvXihbKy1dKShcXGR7Mn0pKD86Oj8oXFxkezJ9KSk/JC87XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9O1xuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgdmFyIHRpbWVTdHJpbmc7IC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cblxuICBpZiAoLzovLnRlc3QoYXJyYXlbMF0pKSB7XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdO1xuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXTtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMV07XG5cbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIpWzBdO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpO1xuXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCAnJyk7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oPzooXFxcXGR7NH18WystXVxcXFxkeycgKyAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pfChcXFxcZHsyfXxbKy1dXFxcXGR7JyArICgyICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSkkKScpO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKHJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4ge1xuICAgIHllYXI6IE5hTixcbiAgICByZXN0RGF0ZVN0cmluZzogJydcbiAgfTtcbiAgdmFyIHllYXIgPSBjYXB0dXJlc1sxXSA/IHBhcnNlSW50KGNhcHR1cmVzWzFdKSA6IG51bGw7XG4gIHZhciBjZW50dXJ5ID0gY2FwdHVyZXNbMl0gPyBwYXJzZUludChjYXB0dXJlc1syXSkgOiBudWxsOyAvLyBlaXRoZXIgeWVhciBvciBjZW50dXJ5IGlzIG51bGwsIG5vdCBib3RoXG5cbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBjZW50dXJ5ID09PSBudWxsID8geWVhciA6IGNlbnR1cnkgKiAxMDAsXG4gICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoKGNhcHR1cmVzWzFdIHx8IGNhcHR1cmVzWzJdKS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZShkYXRlU3RyaW5nLCB5ZWFyKSB7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICh5ZWFyID09PSBudWxsKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChkYXRlUmVnZXgpOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgc3RyaW5nXG5cbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIHZhciBpc1dlZWtEYXRlID0gISFjYXB0dXJlc1s0XTtcbiAgdmFyIGRheU9mWWVhciA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMV0pO1xuICB2YXIgbW9udGggPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzJdKSAtIDE7XG4gIHZhciBkYXkgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzNdKTtcbiAgdmFyIHdlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzRdKTtcbiAgdmFyIGRheU9mV2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNV0pIC0gMTtcblxuICBpZiAoaXNXZWVrRGF0ZSkge1xuICAgIGlmICghdmFsaWRhdGVXZWVrRGF0ZSh5ZWFyLCB3ZWVrLCBkYXlPZldlZWspKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5T2ZJU09XZWVrWWVhcih5ZWFyLCB3ZWVrLCBkYXlPZldlZWspO1xuICB9IGVsc2Uge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCk7XG5cbiAgICBpZiAoIXZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF5KSB8fCAhdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIE1hdGgubWF4KGRheU9mWWVhciwgZGF5KSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlVW5pdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPyBwYXJzZUludCh2YWx1ZSkgOiAxO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWUodGltZVN0cmluZykge1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lU3RyaW5nLm1hdGNoKHRpbWVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBOYU47IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG5cbiAgdmFyIGhvdXJzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1sxXSk7XG4gIHZhciBtaW51dGVzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1syXSk7XG4gIHZhciBzZWNvbmRzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1szXSk7XG5cbiAgaWYgKCF2YWxpZGF0ZVRpbWUoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBob3VycyAqIG1pbGxpc2Vjb25kc0luSG91ciArIG1pbnV0ZXMgKiBtaWxsaXNlY29uZHNJbk1pbnV0ZSArIHNlY29uZHMgKiAxMDAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJywnLCAnLicpKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWV6b25lKHRpbWV6b25lU3RyaW5nKSB7XG4gIGlmICh0aW1lem9uZVN0cmluZyA9PT0gJ1onKSByZXR1cm4gMDtcbiAgdmFyIGNhcHR1cmVzID0gdGltZXpvbmVTdHJpbmcubWF0Y2godGltZXpvbmVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiAwO1xuICB2YXIgc2lnbiA9IGNhcHR1cmVzWzFdID09PSAnKycgPyAtMSA6IDE7XG4gIHZhciBob3VycyA9IHBhcnNlSW50KGNhcHR1cmVzWzJdKTtcbiAgdmFyIG1pbnV0ZXMgPSBjYXB0dXJlc1szXSAmJiBwYXJzZUludChjYXB0dXJlc1szXSkgfHwgMDtcblxuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBzaWduICogKGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlKTtcbn1cblxuZnVuY3Rpb24gZGF5T2ZJU09XZWVrWWVhcihpc29XZWVrWWVhciwgd2VlaywgZGF5KSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoMCk7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoaXNvV2Vla1llYXIsIDAsIDQpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5RGF5ID0gZGF0ZS5nZXRVVENEYXkoKSB8fCA3O1xuICB2YXIgZGlmZiA9ICh3ZWVrIC0gMSkgKiA3ICsgZGF5ICsgMSAtIGZvdXJ0aE9mSmFudWFyeURheTtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZik7XG4gIHJldHVybiBkYXRlO1xufSAvLyBWYWxpZGF0aW9uIGZ1bmN0aW9uc1xuLy8gRmVicnVhcnkgaXMgbnVsbCB0byBoYW5kbGUgdGhlIGxlYXAgeWVhciAodXNpbmcgfHwpXG5cblxudmFyIGRheXNJbk1vbnRocyA9IFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG5mdW5jdGlvbiBpc0xlYXBZZWFySW5kZXgoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgcmV0dXJuIG1vbnRoID49IDAgJiYgbW9udGggPD0gMTEgJiYgZGF0ZSA+PSAxICYmIGRhdGUgPD0gKGRheXNJbk1vbnRoc1ttb250aF0gfHwgKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDI5IDogMjgpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikge1xuICByZXR1cm4gZGF5T2ZZZWFyID49IDEgJiYgZGF5T2ZZZWFyIDw9IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAzNjYgOiAzNjUpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdlZWtEYXRlKF95ZWFyLCB3ZWVrLCBkYXkpIHtcbiAgcmV0dXJuIHdlZWsgPj0gMSAmJiB3ZWVrIDw9IDUzICYmIGRheSA+PSAwICYmIGRheSA8PSA2O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWUoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpIHtcbiAgaWYgKGhvdXJzID09PSAyNCkge1xuICAgIHJldHVybiBtaW51dGVzID09PSAwICYmIHNlY29uZHMgPT09IDA7XG4gIH1cblxuICByZXR1cm4gc2Vjb25kcyA+PSAwICYmIHNlY29uZHMgPCA2MCAmJiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8IDYwICYmIGhvdXJzID49IDAgJiYgaG91cnMgPCAyNTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lem9uZShfaG91cnMsIG1pbnV0ZXMpIHtcbiAgcmV0dXJuIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDw9IDU5O1xufSIsImltcG9ydCB7IGNyZWF0ZVByb2plY3QsIHByb2plY3RzLCBkZWxldGVQcm9qZWN0LCBkZWxldGVUYXNrIH0gZnJvbSBcIi4vZGF0YS1zdHJ1Y3R1cmVcIjtcbmltcG9ydCB7IGZvcm1hdERpc3RhbmNlVG9Ob3cgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBwYXJzZUlTTyB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IHVwZGF0ZVByb2plY3RTdG9yYWdlRGF0YSwgc2F2ZVRvTG9jYWwsIHJlYWRGcm9tTG9jYWwgfSBmcm9tIFwiLi4vZGlzdC9sb2NhbC1zdG9yYWdlXCI7XG5cbmNvbnN0IERPTSA9IChmdW5jdGlvbigpe1xuXG4gICAgLy9lcnJvciBoZXJlLCB3aGVuIHJlLXJlbmRlciBpcyBjYWxsZWQuXG4gICAgY29uc3QgYWRkUHJvamVjdCA9IChuYW1lLCBkZXNjcmlwdGlvbiwgdXBkYXRlUHJvakFycmF5LCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodXBkYXRlUHJvakFycmF5KSB7XG4gICAgICAgICAgICBjcmVhdGVQcm9qZWN0KG5hbWUsIGRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICBpbmRleCA9IHByb2plY3RzLmxlbmd0aC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2cocHJvamVjdHMubGVuZ3RoLTEpO1xuICAgICAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdYDtcbiAgICAgICAgY29uc3QgcHJvamVjdEluZm8gPSBgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2plY3QtaW5mb2A7XG4gICAgICAgIGNyZWF0ZU5vZGUoJ2xpJywgJy5wcm9qZWN0LWxpc3QnLCAncHJvamVjdCcsIGluZGV4LCBuYW1lKTtcbiAgICAgICAgY3JlYXRlTm9kZSgnZGl2JywgJy5tYWluJywgJ3Byb2plY3QtY29udGFpbmVyJywgaW5kZXgsICcnKTtcbiAgICAgICAgY3JlYXRlTm9kZSgnZGl2JywgcHJvamVjdENvbnRhaW5lciwgJ3Byb2plY3QtaW5mbycsIGluZGV4LCAnJyk7XG5cbiAgICAgICAgY3JlYXRlTm9kZSgnSU5QVVQnLCBwcm9qZWN0SW5mbywgJ3Byb2plY3QtbmFtZScsIGluZGV4LCAnJyk7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIC5wcm9qZWN0LW5hbWVgO1xuICAgICAgICBhZGRBdHRyaWJ1dGUocVMocHJvamVjdE5hbWUpLCAndmFsdWUnLCBuYW1lKTtcbiAgICAgICAgYWRkQXR0cmlidXRlKHFTKHByb2plY3ROYW1lKSwgJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICBhZGRDbGFzcyhwcm9qZWN0TmFtZSwgJ2lucHV0LWxvY2tlZCcpO1xuXG4gICAgICAgIGNyZWF0ZU5vZGUoJ0lOUFVUJywgcHJvamVjdEluZm8sICdwcm9qZWN0LWRlc2NyaXB0aW9uJywgaW5kZXgsICcnKTtcbiAgICAgICAgY29uc3QgcHJvamVjdERlc2NyaXB0aW9uID0gYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIC5wcm9qZWN0LWRlc2NyaXB0aW9uYDtcbiAgICAgICAgYWRkQXR0cmlidXRlKHFTKHByb2plY3REZXNjcmlwdGlvbiksICd2YWx1ZScsIGRlc2NyaXB0aW9uKTtcbiAgICAgICAgYWRkQXR0cmlidXRlKHFTKHByb2plY3REZXNjcmlwdGlvbiksICd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgYWRkQ2xhc3MocHJvamVjdERlc2NyaXB0aW9uLCAnaW5wdXQtbG9ja2VkJyk7XG5cbiAgICAgICAgY3JlYXRlTm9kZSgnZGl2JywgcHJvamVjdEluZm8sICdidG4tY29udGFpbmVyJywgJycsICcnKTtcbiAgICAgICAgY3JlYXRlTm9kZSgnYnV0dG9uJywgcHJvamVjdEluZm8gKyAnIGRpdjpsYXN0LWNoaWxkJywgJ3Byb2otZWRpdC1idG4nLCBpbmRleCwgJ0VkaXQnKTtcbiAgICAgICAgY3JlYXRlTm9kZSgnYnV0dG9uJywgcHJvamVjdEluZm8gKyAnIGRpdjpsYXN0LWNoaWxkJywgJ3Byb2otZGVsLWJ0bicsIGluZGV4LCAnRGVsZXRlJyk7XG4gICAgICAgIGNyZWF0ZU5vZGUoJ2RpdicsIHByb2plY3RDb250YWluZXIsICd0YXNrLWxpc3QtY29udGFpbmVyJywgaW5kZXgsICcnKTtcbiAgICAgICAgY3JlYXRlTm9kZSgnYnV0dG9uJywgcHJvamVjdENvbnRhaW5lciwgJ2FkZC10YXNrLWJ0bicsIGluZGV4LCAnKycpO1xuXG4gICAgICAgIHNhdmVUb0xvY2FsKCk7XG5cbiAgICAgICAgc2V0RGVsUHJvakJ0bkxpc3RlbmVyKGluZGV4KTtcbiAgICAgICAgc2V0QWRkVGFza0J0bkxpc3RlbmVyKGluZGV4KTtcbiAgICAgICAgc2V0RWRpdFByb2pCdG5MaXN0ZW5lcihpbmRleCk7XG4gICAgfVxuXG4gICAgY29uc3QgcVMgPSAoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGNvbnN0IHFTQSA9IChzZWxlY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0RWRpdFByb2pCdG5MaXN0ZW5lciA9IChpbmRleCkgPT4ge1xuICAgICAgICBsZXQgZWRpdFByb2pCdG4gPSBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2otZWRpdC1idG5gKTtcbiAgICAgICAgbGV0IGRlbGV0ZVByb2pCdG4gPSBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2otZGVsLWJ0bmApO1xuICAgICAgICBsZXQgcHJvakluZm9zID0gcVNBKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke2luZGV4fVwiXSBpbnB1dFt0eXBlPXRleHRdYCk7XG4gICAgICAgIGVkaXRQcm9qQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT4ge1xuICAgICAgICAgICAgaWYgKGVkaXRQcm9qQnRuLnRleHRDb250ZW50ID09PSAnRWRpdCcpIHtcbiAgICAgICAgICAgICAgICBlZGl0UHJvakJ0bi50ZXh0Q29udGVudCA9ICdTYXZlJztcbiAgICAgICAgICAgICAgICBkZWxldGVQcm9qQnRuLnRleHRDb250ZW50ID0gJ0NhbmNlbCc7XG4gICAgICAgICAgICAgICAgcHJvakluZm9zLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpbnB1dC1sb2NrZWQnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlZGl0UHJvakJ0bi50ZXh0Q29udGVudCA9ICdFZGl0JztcbiAgICAgICAgICAgICAgICBkZWxldGVQcm9qQnRuLnRleHRDb250ZW50ID0gJ0RlbGV0ZSdcbiAgICAgICAgICAgICAgICBwcm9qSW5mb3MuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lucHV0LWxvY2tlZCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZWxlbWVudCB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHVwZGF0ZVByb2plY3RzKGluZGV4LCBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2plY3QtbmFtZWApLnZhbHVlLCBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2plY3QtZGVzY3JpcHRpb25gKS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyUHJvamVjdHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZVByb2plY3RzID0gZnVuY3Rpb24oaW5kZXgsIHByb2plY3ROYW1lLCBwcm9qZWN0RGVzYyl7XG4gICAgICAgIHByb2plY3RzW2luZGV4XS50aXRsZSA9IHByb2plY3ROYW1lO1xuICAgICAgICBwcm9qZWN0c1tpbmRleF0uZGVzY3JpcHRpb24gPSBwcm9qZWN0RGVzYztcbiAgICAgICAgc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2cocHJvamVjdHMpO1xuICAgIH1cblxuICAgIGNvbnN0IHNldERlbFByb2pCdG5MaXN0ZW5lciA9IChpbmRleCkgPT4ge1xuICAgICAgICBsZXQgZGVsUHJvakJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIC5wcm9qLWRlbC1idG5gKTtcbiAgICAgICAgbGV0IGVkaXRQcm9qQnRuID0gcVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIC5wcm9qLWVkaXQtYnRuYCk7XG4gICAgICAgIGxldCBwcm9qSW5mb3MgPSBxU0EoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIGlucHV0W3R5cGU9dGV4dF1gKTtcbiAgICAgICAgZGVsUHJvakJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT4ge1xuICAgICAgICAgICAgaWYgKGRlbFByb2pCdG4udGV4dENvbnRlbnQgPT09ICdEZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlUHJvalNlcXVlbmNlKGRlbFByb2pCdG4pO1xuICAgICAgICAgICAgICAgIHNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbFByb2pCdG4udGV4dENvbnRlbnQgPSAnRGVsZXRlJztcbiAgICAgICAgICAgICAgICBlZGl0UHJvakJ0bi50ZXh0Q29udGVudCA9ICdFZGl0JztcbiAgICAgICAgICAgICAgICBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtpbmRleH1cIl0gLnByb2plY3QtbmFtZWApLnZhbHVlID0gcHJvamVjdHNbaW5kZXhdLnRpdGxlO1xuICAgICAgICAgICAgICAgIHFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke2luZGV4fVwiXSAucHJvamVjdC1kZXNjcmlwdGlvbmApLnZhbHVlID0gcHJvamVjdHNbaW5kZXhdLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIHByb2pJbmZvcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXQtbG9ja2VkJyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHNldEFkZFRhc2tCdG5MaXN0ZW5lciA9IChpbmRleCkgPT4ge1xuICAgICAgICBsZXQgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7aW5kZXh9XCJdIC5hZGQtdGFzay1idG5gKTtcbiAgICAgICAgYWRkVGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT4ge1xuICAgICAgICAgICAgbGV0IHRhc2tFbnRyeURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdUYXNrRW50cnknKTtcbiAgICAgICAgICAgIHRhc2tFbnRyeURpdi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdEluZGV4Jyk7XG4gICAgICAgICAgICBET00uYWRkQXR0cmlidXRlKHRhc2tFbnRyeURpdiwgJ2RhdGEtcHJvamVjdEluZGV4JywgaW5kZXgpXG4gICAgICAgICAgICBET00uaGlkZUVsZW1lbnQoJy5uZXdQcm9qRW50cnknKTtcbiAgICAgICAgICAgIERPTS5zaG93RWxlbWVudCgnLnBvcHVwLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgRE9NLnNob3dFbGVtZW50KCcubmV3VGFza0VudHJ5Jyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZFRhc2sgPSAoXG4gICAgICAgIHByb2plY3RfaW5kZXgsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGR1ZURhdGUsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIHVwZGF0ZVRvZG9BcnJheSxcbiAgICAgICAgdGFza0luZGV4XG4gICAgICAgICkgPT4ge1xuICAgICAgICBpZiAodXBkYXRlVG9kb0FycmF5KSB7XG4gICAgICAgICAgICBwcm9qZWN0c1twcm9qZWN0X2luZGV4XS5hZGRUb0RvKG5hbWUsIGR1ZURhdGUsIHN0YXR1cywgcHJpb3JpdHksIHVwZGF0ZVRvZG9BcnJheSk7XG4gICAgICAgICAgICB0YXNrSW5kZXggPSBwcm9qZWN0c1twcm9qZWN0X2luZGV4XS50b2RvTGlzdC5sZW5ndGgtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YXNrUGFyZW50ID0gYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvamVjdF9pbmRleH1cIl0gLnRhc2stbGlzdC1jb250YWluZXJgO1xuICAgICAgICBjcmVhdGVOb2RlKCdkaXYnLCB0YXNrUGFyZW50LCAndGFzay1jb250YWluZXInLCB0YXNrSW5kZXgsICcnKTtcbiAgICAgICAgbGV0IHRhc2tFbGVtZW50c1BhcmVudCA9IGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2plY3RfaW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXWA7XG5cbiAgICAgICAgY3JlYXRlTm9kZSgnZGl2JywgdGFza0VsZW1lbnRzUGFyZW50LCAnY2hlY2tib3gtY29udGFpbmVyJywgJycsICcnKVxuICAgICAgICBjcmVhdGVOb2RlKCdJTlBVVCcsIHRhc2tFbGVtZW50c1BhcmVudCArICcgLmNoZWNrYm94LWNvbnRhaW5lcicsICdzdGF0dXMnLCBwcm9qZWN0X2luZGV4LCBzdGF0dXMpO1xuICAgICAgICBjcmVhdGVOb2RlKCdsYWJlbCcsIHRhc2tFbGVtZW50c1BhcmVudCArICcgLmNoZWNrYm94LWNvbnRhaW5lcicsICdjaGVja2JveC1sYWJlbCcsICcnLCAnJyk7XG4gICAgICAgIGxldCBjaGVja2JveCA9IHFTKHRhc2tFbGVtZW50c1BhcmVudCArICcgLmNoZWNrYm94LWNvbnRhaW5lcicgKyAnIC5zdGF0dXMnKVxuICAgICAgICBsZXQgY2hlY2tib3hMYWJlbCA9IHFTKHRhc2tFbGVtZW50c1BhcmVudCArICcgLmNoZWNrYm94LWNvbnRhaW5lcicgKyAnIGxhYmVsJyk7XG4gICAgICAgIGFkZEF0dHJpYnV0ZShjaGVja2JveCwgJ2lkJywgJ2NoZWNrYm94JyArICdfJyArIHByb2plY3RfaW5kZXggKyAnXycgKyB0YXNrSW5kZXgpO1xuICAgICAgICBhZGRBdHRyaWJ1dGUoY2hlY2tib3hMYWJlbCwgJ2ZvcicsICdjaGVja2JveCcgKyAnXycgKyBwcm9qZWN0X2luZGV4ICsgJ18nICsgdGFza0luZGV4KTsgLy8gYWRkZWQgcHJvaiBpbmRleCBhbmQgdGFzayBpbmRleCB0byBtYWtlIGlkIHVuaXF1ZVxuXG4gICAgICAgIGNyZWF0ZU5vZGUoJ0lOUFVUJywgdGFza0VsZW1lbnRzUGFyZW50LCAndGFzaycsIHByb2plY3RfaW5kZXgsIG5hbWUpO1xuICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSBgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qZWN0X2luZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnRhc2tgO1xuICAgICAgICBhZGRBdHRyaWJ1dGUocVModGFza0Rlc2NyaXB0aW9uKSwgJ3ZhbHVlJywgbmFtZSk7XG4gICAgICAgIGFkZEF0dHJpYnV0ZShxUyh0YXNrRGVzY3JpcHRpb24pLCAndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgIGFkZENsYXNzKHRhc2tEZXNjcmlwdGlvbiwgJ2lucHV0LWxvY2tlZCcpO1xuXG4gICAgICAgIGNyZWF0ZU5vZGUoJ2xhYmVsJywgdGFza0VsZW1lbnRzUGFyZW50LCAndGFyZ2V0JywgJycsICdEdWU6ICcpO1xuICAgICAgICBjcmVhdGVOb2RlKCdJTlBVVCcsIHRhc2tFbGVtZW50c1BhcmVudCwgJ2R1ZS1kYXRlJywgcHJvamVjdF9pbmRleCwgJycpO1xuICAgICAgICBjb25zdCBkdWVEYXRlTm9kZSA9IGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2plY3RfaW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAuZHVlLWRhdGVgO1xuICAgICAgICBhZGRBdHRyaWJ1dGUocVMoZHVlRGF0ZU5vZGUpLCAndHlwZScsICdkYXRlJyk7XG4gICAgICAgIGFkZEF0dHJpYnV0ZShxUyhkdWVEYXRlTm9kZSksICd2YWx1ZScsIGR1ZURhdGUpO1xuICAgICAgICBhZGRDbGFzcyhkdWVEYXRlTm9kZSwgJ2lucHV0LWxvY2tlZCcpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHJlbWFpbmluZyA9IGZvcm1hdERpc3RhbmNlVG9Ob3cocGFyc2VJU08oZHVlRGF0ZSksICdpbmNsdWRlU2Vjb25kcycsIHsgYWRkU3VmZml4OiB0cnVlIH0pO1xuICAgICAgICBjcmVhdGVOb2RlKCdsYWJlbCcsIHRhc2tFbGVtZW50c1BhcmVudCwgJ3JlbWFpbmluZycsICcnLCByZW1haW5pbmcpO1xuICAgICAgICBcbiAgICAgICAgLy8gY3JlYXRlTm9kZSgncCcsIHRhc2tFbGVtZW50c1BhcmVudCwgJ3ByaW9yaXR5JywgcHJvamVjdF9pbmRleCwgYFByaW9yaXR5OiAke3ByaW9yaXR5fWApO1xuICAgICAgICBjcmVhdGVOb2RlKCdsYWJlbCcsIHRhc2tFbGVtZW50c1BhcmVudCwgJ25ldy10YXNrLXByaW9yaXR5JywgJycsICdQcmlvcml0eTogJyk7XG4gICAgICAgIGNyZWF0ZU5vZGUoJ3NlbGVjdCcsIHRhc2tFbGVtZW50c1BhcmVudCwgJ3ByaW9yaXR5LWxldmVsJywgJ3Rhc2stb3B0aW9ucycsICcnKTtcbiAgICAgICAgY29uc3QgdGFza09wdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2plY3RfaW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAucHJpb3JpdHktbGV2ZWxgKTtcbiAgICAgICAgYWRkQXR0cmlidXRlKHRhc2tPcHRpb25zLCduYW1lJywncHJpb3JpdHktbGV2ZWwnKTtcbiAgICAgICAgYWRkQXR0cmlidXRlKHRhc2tPcHRpb25zLCdpZCcsJ3ByaW9yaXR5LWxldmVsJyk7XG4gICAgICAgIGFkZEF0dHJpYnV0ZSh0YXNrT3B0aW9ucywgJ3ZhbHVlJywgcHJpb3JpdHkpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tQYXJlbnRTZWxlY3QgPSBgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qZWN0X2luZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnByaW9yaXR5LWxldmVsYFxuICAgICAgICBhZGRDbGFzcyh0YXNrUGFyZW50U2VsZWN0LCAnaW5wdXQtbG9ja2VkJyk7XG4gICAgICAgIGNyZWF0ZU5vZGUoJ29wdGlvbicsIHRhc2tQYXJlbnRTZWxlY3QsICdsb3ctcHJpb3JpdHknLCAnbG93LXByaW9yaXR5JywgJ0xvdycpO1xuICAgICAgICBjb25zdCBsb3dQcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFza1BhcmVudFNlbGVjdCArICcgLmxvdy1wcmlvcml0eScpO1xuICAgICAgICBhZGRBdHRyaWJ1dGUobG93UHJpb3JpdHksJ3ZhbHVlJywnbG93Jyk7XG4gICAgICAgIGlmIChwcmlvcml0eSA9PT0gJ2xvdycgfHwgcHJpb3JpdHkgPT09ICdMb3cnKSBhZGRBdHRyaWJ1dGUobG93UHJpb3JpdHksJ3NlbGVjdGVkJywnJyk7XG4gICAgXG4gICAgICAgIGNyZWF0ZU5vZGUoJ29wdGlvbicsIHRhc2tQYXJlbnRTZWxlY3QsICdtZWQtcHJpb3JpdHknLCAnbWVkLXByaW9yaXR5JywgJ01lZGl1bScpO1xuICAgICAgICBjb25zdCBtZWRQcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFza1BhcmVudFNlbGVjdCArJyAubWVkLXByaW9yaXR5Jyk7XG4gICAgICAgIGFkZEF0dHJpYnV0ZShtZWRQcmlvcml0eSwndmFsdWUnLCdtZWRpdW0nKTtcbiAgICAgICAgaWYgKHByaW9yaXR5ID09PSAnbWVkaXVtJyB8fCBwcmlvcml0eSA9PT0gJ01lZGl1bScpIGFkZEF0dHJpYnV0ZShtZWRQcmlvcml0eSwnc2VsZWN0ZWQnLCcnKTtcbiAgICBcbiAgICAgICAgY3JlYXRlTm9kZSgnb3B0aW9uJywgdGFza1BhcmVudFNlbGVjdCwgJ2hpZ2gtcHJpb3JpdHknLCAnaGlnaC1wcmlvcml0eScsICdIaWdoJyk7XG4gICAgICAgIGNvbnN0IGhpZ2hQcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFza1BhcmVudFNlbGVjdCArICcgLmhpZ2gtcHJpb3JpdHknKTtcbiAgICAgICAgYWRkQXR0cmlidXRlKGhpZ2hQcmlvcml0eSwndmFsdWUnLCdoaWdoJyk7XG4gICAgICAgIGlmIChwcmlvcml0eSA9PT0gJ2hpZ2gnIHx8IHByaW9yaXR5ID09PSAnSGlnaCcpIGFkZEF0dHJpYnV0ZShoaWdoUHJpb3JpdHksJ3NlbGVjdGVkJywnJyk7XG5cbiAgICAgICAgY3JlYXRlTm9kZSgnYnV0dG9uJywgdGFza0VsZW1lbnRzUGFyZW50LCAndGFzay1lZGl0LWJ0bicsIHByb2plY3RfaW5kZXgsICdFZGl0Jyk7XG4gICAgICAgIGNyZWF0ZU5vZGUoJ2J1dHRvbicsIHRhc2tFbGVtZW50c1BhcmVudCwgJ3Rhc2stZGVsZXRlLWJ0bicsIHByb2plY3RfaW5kZXgsICdEZWxldGUnKTtcblxuICAgICAgICBjb25zdCBkZWxUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qZWN0X2luZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gPiAqOmxhc3QtY2hpbGRgKVxuICAgICAgICBkZWxUYXNrQnRuLnNldEF0dHJpYnV0ZSgnZGF0YS10YXNrSW5kZXgnLCB0YXNrSW5kZXgpO1xuXG4gICAgICAgIGxldCBkZWxldGVUYXNrQnRuU2VxdWVuY2VQc2V1ZG8gPSBkZWxldGVUYXNrQnRuU2VxdWVuY2UuYmluZChudWxsLCBkZWxUYXNrQnRuKTtcbiAgICAgICAgZGVsVGFza0J0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGRlbGV0ZVRhc2tCdG5TZXF1ZW5jZVBzZXVkbyk7XG4gICAgICAgIGRlbFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGVUYXNrQnRuU2VxdWVuY2VQc2V1ZG8pO1xuXG4gICAgICAgIHNldEVkaXRUYXNrQnRuTGlzdGVuZXIocHJvamVjdF9pbmRleCwgdGFza0luZGV4KTtcbiAgICAgICAgc2V0U3RhdHVzQ2hlY2tib3hMaXN0ZW5lcihwcm9qZWN0X2luZGV4LCB0YXNrSW5kZXgpO1xuICAgICAgICB0b2dnbGVEYXRlUGlja2VyKHByb2plY3RfaW5kZXgsIHRhc2tJbmRleCwgdHJ1ZSk7XG4gICAgICAgIHVwZGF0ZVRpbWVSZW1haW5pbmcocHJvamVjdF9pbmRleCx0YXNrSW5kZXgpO1xuICAgIH1cblxuICAgIGNvbnN0IHNldEVkaXRUYXNrQnRuTGlzdGVuZXIgPSAocHJvakluZGV4LCB0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGVkaXRUYXNrQnRuID0gcVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnRhc2stZWRpdC1idG5gKTtcbiAgICAgICAgbGV0IGRlbGV0ZVRhc2tCdG4gPSBxUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAudGFzay1kZWxldGUtYnRuYCk7XG4gICAgICAgIGxldCB0YXNrRGF0YSA9IHFTQShgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSBpbnB1dCwgXG4gICAgICAgICAgICAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIHNlbGVjdGApO1xuICAgICAgICBlZGl0VGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT4ge1xuICAgICAgICAgICAgaWYgKGVkaXRUYXNrQnRuLnRleHRDb250ZW50ID09PSAnRWRpdCcpIHtcbiAgICAgICAgICAgICAgICBlZGl0VGFza0J0bi50ZXh0Q29udGVudCA9ICdTYXZlJztcbiAgICAgICAgICAgICAgICBkZWxldGVUYXNrQnRuLnRleHRDb250ZW50ID0gJ0NhbmNlbCc7XG4gICAgICAgICAgICAgICAgdG9nZ2xlRGF0ZVBpY2tlcihwcm9qSW5kZXgsIHRhc2tJbmRleCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRhc2tEYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpbnB1dC1sb2NrZWQnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlZGl0VGFza0J0bi50ZXh0Q29udGVudCA9ICdFZGl0JztcbiAgICAgICAgICAgICAgICBkZWxldGVUYXNrQnRuLnRleHRDb250ZW50ID0gJ0RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgdG9nZ2xlRGF0ZVBpY2tlcihwcm9qSW5kZXgsIHRhc2tJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGFza0RhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUgIT09IFwic3RhdHVzXCIpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXQtbG9ja2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRhc2socHJvakluZGV4LHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWVSZW1haW5pbmcocHJvakluZGV4LHRhc2tJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBzZXRTdGF0dXNDaGVja2JveExpc3RlbmVyID0gKHByb2pJbmRleCwgdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGxldCBzdGF0dXNDaGVja2JveCA9IHFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIC5zdGF0dXNgKTtcbiAgICAgICAgc3RhdHVzQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgdXBkYXRlVGFzayhwcm9qSW5kZXgsdGFza0luZGV4KTtcbiAgICAgICAgICAgIHNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlVGFzayA9IChwcm9qSW5kZXgsdGFza0luZGV4KSA9PiB7XG4gICAgICAgIGxldCBzdGF0dXMgPSBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnN0YXR1c2ApO1xuICAgICAgICBsZXQgdGFza25hbWUgPSBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnRhc2tgKS52YWx1ZTtcbiAgICAgICAgbGV0IGR1ZURhdGUgPSBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLmR1ZS1kYXRlYCkudmFsdWU7XG4gICAgICAgIGxldCBwcmlvcml0eSA9IERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAucHJpb3JpdHktbGV2ZWxgKS52YWx1ZTtcbiAgICAgICAgbGV0IHJlbWFpbmluZyA9IERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAucmVtYWluaW5nYCk7XG4gICAgICAgIHN0YXR1cyA9IChzdGF0dXMuY2hlY2tlZCkgID8gc3RhdHVzID0gdHJ1ZSA6IHN0YXR1cyA9IGZhbHNlO1xuICAgICAgICBwcm9qZWN0c1twcm9qSW5kZXhdLnRvZG9MaXN0W3Rhc2tJbmRleF0uY29tcGxldGUgPSBzdGF0dXM7XG4gICAgICAgIHByb2plY3RzW3Byb2pJbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5uYW1lID0gdGFza25hbWU7XG4gICAgICAgIHByb2plY3RzW3Byb2pJbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICAgICAgcHJvamVjdHNbcHJvakluZGV4XS50b2RvTGlzdFt0YXNrSW5kZXhdLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbiAgICAgICAgLy8gdXBkYXRlUHJvamVjdFN0b3JhZ2VEYXRhKCk7XG5cbiAgICAgICAgLy91cGRhdGUgc2VsZWN0aW9uIG9wdGlvblxuICAgICAgICBsZXQgcHJpb3JpdHlfb3B0aW9ucyA9IERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAucHJpb3JpdHktbGV2ZWwgPiBvcHRpb25gKTtcbiAgICAgICAgbGV0IGxvd19wcmlvcml0eSA9IERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAubG93LXByaW9yaXR5YCk7XG4gICAgICAgIGxldCBtZWRfcHJpb3JpdHkgPSBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLm1lZC1wcmlvcml0eWApO1xuICAgICAgICBsZXQgaGlnaF9wcmlvcml0eSA9IERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAuaGlnaC1wcmlvcml0eWApO1xuICAgICAgICAvL2NsZWFyIGFsbCBvcHRpb25zXG4gICAgICAgIC8vIHByaW9yaXR5X29wdGlvbnMucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICBsb3dfcHJpb3JpdHkucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICBtZWRfcHJpb3JpdHkucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICBoaWdoX3ByaW9yaXR5LnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgaWYgKHByaW9yaXR5ID09PSAnbG93JykgYWRkQXR0cmlidXRlKGxvd19wcmlvcml0eSwnc2VsZWN0ZWQnLCcnKTtcbiAgICAgICAgaWYgKHByaW9yaXR5ID09PSAnbWVkaXVtJykgYWRkQXR0cmlidXRlKG1lZF9wcmlvcml0eSwnc2VsZWN0ZWQnLCcnKTtcbiAgICAgICAgaWYgKHByaW9yaXR5ID09PSAnaGlnaCcpIGFkZEF0dHJpYnV0ZShoaWdoX3ByaW9yaXR5LCdzZWxlY3RlZCcsJycpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcmlvcml0eV9vcHRpb25zKTtcblxuICAgICAgICBsZXQgdGltZUxlZnQgPSBmb3JtYXREaXN0YW5jZVRvTm93KHBhcnNlSVNPKGR1ZURhdGUpLCB7IGFkZFN1ZmZpeDogdHJ1ZSB9KTtcbiAgICAgICAgcmVtYWluaW5nLnRleHRDb250ZW50ID0gdGltZUxlZnQ7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdG9yZVRhc2tzID0gKHByb2pJbmRleCx0YXNrSW5kZXgpID0+IHtcbiAgICAgICAgRE9NLnFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIC5zdGF0dXNgKS52YWx1ZSA9IHByb2plY3RzW3Byb2pJbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5jb21wbGV0ZTtcbiAgICAgICAgRE9NLnFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIC50YXNrYCkudmFsdWUgPSBwcm9qZWN0c1twcm9qSW5kZXhdLnRvZG9MaXN0W3Rhc2tJbmRleF0ubmFtZTtcbiAgICAgICAgRE9NLnFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIC5kdWUtZGF0ZWApLnZhbHVlID0gcHJvamVjdHNbcHJvakluZGV4XS50b2RvTGlzdFt0YXNrSW5kZXhdLmR1ZURhdGU7XG4gICAgICAgIERPTS5xUyhgLnByb2plY3QtY29udGFpbmVyW2RhdGEtcHJvamVjdEluZGV4PVwiJHtwcm9qSW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza0luZGV4fVwiXSAucHJpb3JpdHktbGV2ZWxgKS52YWx1ZSA9IHByb2plY3RzW3Byb2pJbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5wcmlvcml0eTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY3JlYXRlTm9kZSA9IChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGF0dHJpYnV0ZSxcbiAgICAgICAgdGV4dENvbnRlbnRcbiAgICAgICAgKSA9PiB7XG4gICAgICAgIGxldCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gbnVsbCkgbm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIGlmIChjbGFzc05hbWUgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICAgICAgYWRkUHJvamVjdExpc3RDbGlja0V2ZW50KG5vZGUpO1xuICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggZWFjaCBwcm9qZWN0IGFuZCBqdXN0IHNob3cgdGhlIGxhdGVzdCB0YXNrcyBmcm9tIHRoZSBsYXRlc3QgcHJvamVjdFxuICAgICAgICAgICAgdG9nZ2xlVGFza3NDb250YWluZXJWaXNpYmlsaXR5KG5vZGUpOyBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGFzc05hbWUgPT09ICdzdGF0dXMnKXtcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xuICAgICAgICAgICAgaWYgKHRleHRDb250ZW50ID09PSAndHJ1ZScgfHwgdGV4dENvbnRlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBub2RlLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gJycgJiYgYXR0cmlidXRlID49IDApIHtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT09ICd0YXNrLWNvbnRhaW5lcicpIHtcbiAgICAgICAgICAgICAgICBhZGRBdHRyaWJ1dGUobm9kZSwgJ2RhdGEtdGFza0luZGV4JywgYXR0cmlidXRlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0SW5kZXgnLGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGV4dENvbnRlbnQgIT09IG51bGwpIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcblxuICAgICAgICBsZXQgcGFyZW50Tm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyZW50KTtcbiAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChub2RlKTtcblxuICAgIH1cblxuICAgIGNvbnN0IGFkZEF0dHJpYnV0ZSA9IChub2RlLCBhdHRyaWJ1dGUsIGF0dHJpYnV0ZVZhbHVlKSA9PiB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSxhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlVGFza3NDb250YWluZXJWaXNpYmlsaXR5ID0gKHByb2plY3ROb2RlKSA9PiB7XG4gICAgICAgIGxldCBhbGxQcm9qZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2plY3QtY29udGFpbmVyJyk7XG4gICAgICAgIGZvciAobGV0IGl0ZW0gaW4gQXJyYXkuZnJvbShhbGxQcm9qZWN0cykpIHtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdEluZGV4JykgIT09IGFsbFByb2plY3RzW2l0ZW1dLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0SW5kZXgnKSl7XG4gICAgICAgICAgICAgICAgYWxsUHJvamVjdHNbaXRlbV0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsbFByb2plY3RzW2l0ZW1dLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWRkUHJvamVjdExpc3RDbGlja0V2ZW50ID0gKG5vZGUpID0+IHtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRvZ2dsZVRhc2tzQ29udGFpbmVyVmlzaWJpbGl0eShub2RlKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRWxlbWVudCA9IChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgbGV0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzTmFtZSk7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0VsZW1lbnQgPSAoY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgIGxldCBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbGFzc05hbWUpO1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZENsYXNzID0gKGNsYXNzU2VsZWN0b3IsIG5ld0NsYXNzTmFtZSkgPT4ge1xuICAgICAgICBsZXQgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2xhc3NTZWxlY3Rvcik7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChuZXdDbGFzc05hbWUpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRQcm9qZWN0OiBhZGRQcm9qZWN0LFxuICAgICAgICBhZGRUYXNrOiBhZGRUYXNrLFxuICAgICAgICBhZGRBdHRyaWJ1dGU6IGFkZEF0dHJpYnV0ZSxcbiAgICAgICAgY3JlYXRlTm9kZTogY3JlYXRlTm9kZSxcbiAgICAgICAgc2hvd0VsZW1lbnQ6IHNob3dFbGVtZW50LFxuICAgICAgICBoaWRlRWxlbWVudDogaGlkZUVsZW1lbnQsXG4gICAgICAgIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgICAgICAgcVM6IHFTLFxuICAgICAgICBxU0E6IHFTQSxcbiAgICAgICAgcmVzdG9yZVRhc2tzOiByZXN0b3JlVGFza3NcbiAgICB9XG5cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IERPTTtcblxuLy9wb3B1cCB3aW5kb3dzIGZvciBuZXcgcHJvamVjdC90YXNrXG5jb25zdCBjcmVhdGVQcm9qZWN0RW50cnlQb3B1cCA9ICgpID0+IHtcbiAgICBET00uY3JlYXRlTm9kZSgnZGl2JywgJ2JvZHknLCAncG9wdXAtY29udGFpbmVyJywgJycsICcnKTtcbiAgICBET00uYWRkQ2xhc3MoJy5wb3B1cC1jb250YWluZXInLCAnaGlkZGVuJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2RpdicsICcucG9wdXAtY29udGFpbmVyJywgJ25ld1Byb2pFbnRyeScsICcnLCAnJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2gzJywgJy5uZXdQcm9qRW50cnknLCAnYWRkLXByb2otdGl0bGUnLCAnJywgJ0FkZCBOZXcgUHJvamVjdCcpO1xuICAgIFxuICAgIERPTS5jcmVhdGVOb2RlKCdsYWJlbCcsICcubmV3UHJvakVudHJ5JywgJ25ldy1wcm9qZWN0LWxhYmVsJywgJycsICdQcm9qZWN0IE5hbWU6ICcpO1xuICAgIERPTS5jcmVhdGVOb2RlKCdJTlBVVCcsICcubmV3LXByb2plY3QtbGFiZWwnLCAnbmV3LXByb2plY3QtaW5wdXQnLCAnJywgJycpO1xuICAgIFxuICAgIERPTS5jcmVhdGVOb2RlKCdsYWJlbCcsICcubmV3UHJvakVudHJ5JywgJ25ldy1wcm9qZWN0LWxhYmVsLWRlc2NyaXB0aW9uJywgJycsICdEZXNjcmlwdGlvbjogJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ0lOUFVUJywgJy5uZXctcHJvamVjdC1sYWJlbC1kZXNjcmlwdGlvbicsICduZXctcHJvamVjdC1kZXNjLWlucHV0JywgJycsICcnKTtcblxuICAgIERPTS5jcmVhdGVOb2RlKCdkaXYnLCAnLm5ld1Byb2pFbnRyeScsICdidG4tY29udGFpbmVyJywgJycsICcnKTtcbiAgICBET00uY3JlYXRlTm9kZSgnYnV0dG9uJywgJy5idG4tY29udGFpbmVyJywgJ3BvcHVwLWFkZFByb2otYnRuJywgJycsICdBZGQnKTtcbiAgICBET00uY3JlYXRlTm9kZSgnYnV0dG9uJywgJy5idG4tY29udGFpbmVyJywgJ3BvcHVwLWNhbmNlbFByb2otYnRuJywgJycsICdDYW5jZWwnKTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXctcHJvamVjdC1pbnB1dCcpLnZhbHVlID0gJ0RlZmF1bHQgUHJvamVjdCc7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1wcm9qZWN0LWRlc2MtaW5wdXQnKS52YWx1ZSA9ICdEZWZhdWx0IFByb2plY3QgRGVzY3JpcHRpb24nO1xufVxuXG5jb25zdCBjcmVhdGVUYXNrRW50cnlQb3B1cCA9ICgpID0+IHtcbiAgICBET00uY3JlYXRlTm9kZSgnZGl2JywgJy5wb3B1cC1jb250YWluZXInLCAnbmV3VGFza0VudHJ5JywgJycsICcnKTtcbiAgICBET00uY3JlYXRlTm9kZSgnaDMnLCAnLm5ld1Rhc2tFbnRyeScsICdhZGQtdGFzay10aXRsZScsICcnLCAnQWRkIE5ldyBUYXNrJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2xhYmVsJywgJy5uZXdUYXNrRW50cnknLCAnbmV3LXRhc2stbGFiZWwnLCAnJywgJ1Rhc2sgTmFtZTogJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ0lOUFVUJywgJy5uZXctdGFzay1sYWJlbCcsICduZXctdGFzay1pbnB1dC10aXRsZScsICcnLCAnJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2xhYmVsJywgJy5uZXdUYXNrRW50cnknLCAnbmV3LXRhc2stZHVlRGF0ZScsICcnLCAnRHVlIERhdGU6ICcpO1xuICAgIERPTS5jcmVhdGVOb2RlKCdJTlBVVCcsICcubmV3LXRhc2stZHVlRGF0ZScsICduZXctdGFzay1pbnB1dC1kdWVEYXRlJywgJycsICcnKTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXctdGFzay1pbnB1dC10aXRsZScpLnZhbHVlID0gJ0RlZmF1bHQgVGFzayc7XG5cbiAgICBsZXQgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy10YXNrLWlucHV0LWR1ZURhdGUnKTtcbiAgICBET00uYWRkQXR0cmlidXRlKGR1ZURhdGVJbnB1dCwgJ3R5cGUnLCAnZGF0ZScpO1xuXG4gICAgY29uc3QgbG9jYWx0aW1lID0gbmV3IERhdGUoKTtcbiAgICBsZXQgZGF5ID0gbG9jYWx0aW1lLmdldERhdGUoKSsxO1xuICAgIGxldCBtb250aCA9IGxvY2FsdGltZS5nZXRNb250aCgpICsgMTtcbiAgICBsZXQgeWVhciA9IGxvY2FsdGltZS5nZXRGdWxsWWVhcigpO1xuICAgIGlmIChtb250aCA8IDEwKSBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgaWYgKGRheSA8IDEwKSBkYXkgPSBcIjBcIiArIGRheTtcbiAgICBjb25zdCB0b2RheSA9ICB5ZWFyICsgXCItXCIgKyBtb250aCArIFwiLVwiICsgZGF5OyAvL2h0bWwgb25seSBhY2NlcHRzIHRoaXMgZGF0ZSBmb3JtYXRcblxuICAgIGR1ZURhdGVJbnB1dC52YWx1ZSA9IHRvZGF5O1xuICAgIC8vIGNvbnNvbGUubG9nKGxvY2FsdGltZSk7XG5cbiAgICBET00uY3JlYXRlTm9kZSgnbGFiZWwnLCAnLm5ld1Rhc2tFbnRyeScsICduZXctdGFzay1wcmlvcml0eScsICcnLCAnUHJpb3JpdHk6ICcpO1xuICAgIERPTS5jcmVhdGVOb2RlKCdzZWxlY3QnLCAnLm5ldy10YXNrLXByaW9yaXR5JywgJ3ByaW9yaXR5LWxldmVsJywgJ3Rhc2stb3B0aW9ucycsICcnKTtcbiAgICBjb25zdCB0YXNrT3B0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmlvcml0eS1sZXZlbCcpO1xuICAgIERPTS5hZGRBdHRyaWJ1dGUodGFza09wdGlvbnMsJ25hbWUnLCdwcmlvcml0eS1sZXZlbCcpO1xuICAgIERPTS5hZGRBdHRyaWJ1dGUodGFza09wdGlvbnMsJ2lkJywncHJpb3JpdHktbGV2ZWwnKTtcbiAgICBcbiAgICBET00uY3JlYXRlTm9kZSgnb3B0aW9uJywgJy5wcmlvcml0eS1sZXZlbCcsICdsb3ctcHJpb3JpdHknLCAnbG93LXByaW9yaXR5JywgJ0xvdycpO1xuICAgIGNvbnN0IGxvd1ByaW9yaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvdy1wcmlvcml0eScpO1xuICAgIERPTS5hZGRBdHRyaWJ1dGUobG93UHJpb3JpdHksJ3ZhbHVlJywnbG93Jyk7XG5cbiAgICBET00uY3JlYXRlTm9kZSgnb3B0aW9uJywgJy5wcmlvcml0eS1sZXZlbCcsICdtZWQtcHJpb3JpdHknLCAnbWVkLXByaW9yaXR5JywgJ01lZGl1bScpO1xuICAgIGNvbnN0IG1lZFByaW9yaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lZC1wcmlvcml0eScpO1xuICAgIERPTS5hZGRBdHRyaWJ1dGUobWVkUHJpb3JpdHksJ3ZhbHVlJywnbWVkaXVtJyk7XG5cbiAgICBET00uY3JlYXRlTm9kZSgnb3B0aW9uJywgJy5wcmlvcml0eS1sZXZlbCcsICdoaWdoLXByaW9yaXR5JywgJ2hpZ2gtcHJpb3JpdHknLCAnSGlnaCcpO1xuICAgIGNvbnN0IGhpZ2hQcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oaWdoLXByaW9yaXR5Jyk7XG4gICAgRE9NLmFkZEF0dHJpYnV0ZShoaWdoUHJpb3JpdHksJ3ZhbHVlJywnaGlnaCcpO1xuXG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2RpdicsICcubmV3VGFza0VudHJ5JywgJ2J0bi1jb250YWluZXInLCAnJywgJycpO1xuICAgIERPTS5jcmVhdGVOb2RlKCdidXR0b24nLCAnLm5ld1Rhc2tFbnRyeSAuYnRuLWNvbnRhaW5lcicsICdwb3B1cC1hZGRUYXNrLWJ0bicsICcnLCAnQWRkJyk7XG4gICAgRE9NLmNyZWF0ZU5vZGUoJ2J1dHRvbicsICcubmV3VGFza0VudHJ5IC5idG4tY29udGFpbmVyJywgJ3BvcHVwLWNhbmNlbFRhc2stYnRuJywgJycsICdDYW5jZWwnKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUHJvamVjdEVudHJ5UG9wdXAsIGNyZWF0ZVRhc2tFbnRyeVBvcHVwIH1cblxuY29uc3QgYWRkQnRuRXZlbnQgPSAoKSA9PiB7XG4gICAgbGV0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtcHJvai1idG4nKTtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICBET00uaGlkZUVsZW1lbnQoJy5uZXdUYXNrRW50cnknKTtcbiAgICAgICAgRE9NLnNob3dFbGVtZW50KCcucG9wdXAtY29udGFpbmVyJyk7XG4gICAgICAgIERPTS5zaG93RWxlbWVudCgnLm5ld1Byb2pFbnRyeScpO1xuICAgIH0pXG59XG5cbmNvbnN0IGNhbmNlbEJ0bkV2ZW50ID0gKCkgPT4ge1xuICAgIGxldCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtY2FuY2VsUHJvai1idG4nKTtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICBET00uaGlkZUVsZW1lbnQoJy5wb3B1cC1jb250YWluZXInKTtcbiAgICAgICAgRE9NLmhpZGVFbGVtZW50KCcubmV3UHJvakVudHJ5Jyk7XG4gICAgfSlcbn1cblxuY29uc3QgYWRkVGFza0J0bkV2ZW50ID0gKCkgPT4ge1xuICAgIGxldCBidG5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWRkLXRhc2stYnRuJyk7XG4gICAgY29uc3QgdGFza0VudHJ5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1Rhc2tFbnRyeScpO1xuICAgIGZvciAobGV0IGJ0biBvZiBBcnJheS5mcm9tKGJ0bnMpKSB7XG4gICAgICAgIGxldCBpbmRleCA9IGJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdEluZGV4Jyk7ICAgICAgIFxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgdGFza0VudHJ5RGl2LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0SW5kZXgnKTtcbiAgICAgICAgICAgIERPTS5hZGRBdHRyaWJ1dGUodGFza0VudHJ5RGl2LCAnZGF0YS1wcm9qZWN0SW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgIERPTS5oaWRlRWxlbWVudCgnLm5ld1Byb2pFbnRyeScpO1xuICAgICAgICAgICAgRE9NLnNob3dFbGVtZW50KCcucG9wdXAtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBET00uc2hvd0VsZW1lbnQoJy5uZXdUYXNrRW50cnknKTtcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmNvbnN0IGNhbmNlbFRhc2tCdG5FdmVudCA9ICgpID0+IHtcbiAgICBsZXQgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWNhbmNlbFRhc2stYnRuJyk7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgRE9NLmhpZGVFbGVtZW50KCcucG9wdXAtY29udGFpbmVyJyk7XG4gICAgICAgIERPTS5oaWRlRWxlbWVudCgnLm5ld1Rhc2tFbnRyeScpO1xuICAgIH0pXG59XG5cbmNvbnN0IGRlbGV0ZVRhc2tCdG5TZXF1ZW5jZSA9IChidG4pID0+IHtcbiAgICBsZXQgdGFza19pbmRleCA9IGJ0bi5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXNrSW5kZXgnKTtcbiAgICBsZXQgcHJvamVjdF9pbmRleCA9IGJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdEluZGV4Jyk7XG5cbiAgICBsZXQgZWRpdFRhc2tCdG4gPSBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvamVjdF9pbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrX2luZGV4fVwiXSAudGFzay1lZGl0LWJ0bmApO1xuICAgIGxldCBkZWxldGVUYXNrQnRuID0gRE9NLnFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2plY3RfaW5kZXh9XCJdIC50YXNrLWNvbnRhaW5lcltkYXRhLXRhc2tJbmRleD1cIiR7dGFza19pbmRleH1cIl0gLnRhc2stZGVsZXRlLWJ0bmApO1xuICAgIGxldCB0YXNrRGF0YSA9IERPTS5xU0EoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvamVjdF9pbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrX2luZGV4fVwiXSBpbnB1dCwgXG4gICAgICAgIC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvamVjdF9pbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrX2luZGV4fVwiXSBzZWxlY3RgKTtcblxuICAgIGlmIChkZWxldGVUYXNrQnRuLnRleHRDb250ZW50ID09PSAnQ2FuY2VsJykge1xuICAgICAgICBkZWxldGVUYXNrQnRuLnRleHRDb250ZW50ID0gJ0RlbGV0ZSc7XG4gICAgICAgIGVkaXRUYXNrQnRuLnRleHRDb250ZW50ID0gJ0VkaXQnO1xuICAgICAgICB0b2dnbGVEYXRlUGlja2VyKHByb2plY3RfaW5kZXgsIHRhc2tfaW5kZXgsIHRydWUpO1xuICAgICAgICB0YXNrRGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUgIT09IFwic3RhdHVzXCIpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW5wdXQtbG9ja2VkJyk7XG4gICAgICAgIH0pXG4gICAgICAgIERPTS5yZXN0b3JlVGFza3MocHJvamVjdF9pbmRleCwgdGFza19pbmRleCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGVUYXNrKHByb2plY3RfaW5kZXgsIHRhc2tfaW5kZXgpO1xuICAgICAgICByZW5kZXJUYXNrcyhwcm9qZWN0X2luZGV4KTtcbiAgICAgICAgdG9nZ2xlRGF0ZVBpY2tlcihwcm9qZWN0X2luZGV4LCB0YXNrX2luZGV4LCBmYWxzZSk7XG4gICAgfVxuXG59XG5cbmNvbnN0IGRlbGV0ZVRhc2tCdG5FdmVudCA9ICgpID0+IHtcbiAgICBsZXQgYnRucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rhc2stZGVsZXRlLWJ0bicpO1xuICAgIGZvciAobGV0IGJ0biBvZiBBcnJheS5mcm9tKGJ0bnMpKSB7XG4gICAgICAgIGxldCBkZWxldGVUYXNrQnRuU2VxdWVuY2VQc2V1ZG8gPSBkZWxldGVUYXNrQnRuU2VxdWVuY2UuYmluZChudWxsLCBidG4pO1xuICAgICAgICBidG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGVUYXNrQnRuU2VxdWVuY2VQc2V1ZG8pO1xuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGVUYXNrQnRuU2VxdWVuY2VQc2V1ZG8pO1xuICAgIH1cbn1cblxuY29uc3QgcmVuZGVyVGFza3MgPSAocHJvamVjdF9pbmRleCkgPT4ge1xuICAgIGxldCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnRhc2stbGlzdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2plY3RfaW5kZXh9XCJdYCApO1xuICAgICAgICB3aGlsZSh0YXNrQ29udGFpbmVyLmZpcnN0Q2hpbGQpe1xuICAgICAgICAgICAgdGFza0NvbnRhaW5lci5yZW1vdmVDaGlsZCh0YXNrQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICAgICAgZm9yIChsZXQgdGFza0luZGV4IGluIHByb2plY3RzW3Byb2plY3RfaW5kZXhdLnRvZG9MaXN0KSB7XG4gICAgICAgICAgICBET00uYWRkVGFzayhcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2luZGV4LFxuICAgICAgICAgICAgICAgIHByb2plY3RzW3Byb2plY3RfaW5kZXhdLnRvZG9MaXN0W3Rhc2tJbmRleF0ubmFtZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0c1twcm9qZWN0X2luZGV4XS50b2RvTGlzdFt0YXNrSW5kZXhdLmR1ZURhdGUsXG4gICAgICAgICAgICAgICAgcHJvamVjdHNbcHJvamVjdF9pbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5jb21wbGV0ZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0c1twcm9qZWN0X2luZGV4XS50b2RvTGlzdFt0YXNrSW5kZXhdLnByaW9yaXR5LFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRhc2tJbmRleFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdXBkYXRlVGltZVJlbWFpbmluZyhwcm9qZWN0X2luZGV4LHRhc2tJbmRleCk7XG4gICAgICAgIH1cbn1cblxuY29uc3QgZW5yb2xsUHJvamVjdCA9ICgpID0+IHtcbiAgICBsZXQgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1wcm9qZWN0LWlucHV0JykudmFsdWU7XG4gICAgbGV0IHByb2plY3REZXNjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1wcm9qZWN0LWRlc2MtaW5wdXQnKS52YWx1ZTtcbiAgICBET00uYWRkUHJvamVjdChwcm9qZWN0VGl0bGUsIHByb2plY3REZXNjLCB0cnVlLCAnJyk7XG4gICAgRE9NLmhpZGVFbGVtZW50KCcucG9wdXAtY29udGFpbmVyJyk7XG4gICAgRE9NLmhpZGVFbGVtZW50KCcubmV3UHJvakVudHJ5Jyk7XG5cbiAgICAvLyBsZXQgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXG4gICAgY29uc3QgbG9jYWx0aW1lID0gbmV3IERhdGUoKTtcbiAgICBsZXQgZGF5ID0gbG9jYWx0aW1lLmdldERhdGUoKSsxO1xuICAgIGxldCBtb250aCA9IGxvY2FsdGltZS5nZXRNb250aCgpICsgMTtcbiAgICBsZXQgeWVhciA9IGxvY2FsdGltZS5nZXRGdWxsWWVhcigpO1xuICAgIGlmIChtb250aCA8IDEwKSBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgaWYgKGRheSA8IDEwKSBkYXkgPSBcIjBcIiArIGRheTtcbiAgICBjb25zdCB0b2RheSA9ICB5ZWFyICsgXCItXCIgKyBtb250aCArIFwiLVwiICsgZGF5OyAvL2h0bWwgb25seSBhY2NlcHRzIHRoaXMgZGF0ZSBmb3JtYXRcbiAgICBcbiAgICBET00uYWRkVGFzayhwcm9qZWN0cy5sZW5ndGgtMSwnRGVmYXVsdCBUYXNrJywgdG9kYXksIGZhbHNlLCAnbG93JywgdHJ1ZSwgMCk7XG4gICAgc2F2ZVRvTG9jYWwoKTtcbn1cblxuY29uc3QgZW5yb2xsQnRuRXZlbnQgPSAoKSA9PiB7XG4gICAgbGV0IGVucm9sbEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1hZGRQcm9qLWJ0bicpO1xuICAgIGVucm9sbEJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGVucm9sbFByb2plY3QpO1xuICAgIGVucm9sbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGVucm9sbFByb2plY3QpO1xuICAgIC8vIGNvbnNvbGUubG9nKHByb2plY3RzKVxufVxuXG5jb25zdCBlbnJvbGxUYXNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHRhc2tFbnRyeURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdUYXNrRW50cnknKTtcbiAgICBsZXQgaW5kZXggPSB0YXNrRW50cnlEaXYuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3RJbmRleCcpO1xuICAgIGxldCB0YXNrVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LXRhc2staW5wdXQtdGl0bGUnKS52YWx1ZTtcbiAgICBsZXQgZHVlRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXctdGFzay1pbnB1dC1kdWVEYXRlJykudmFsdWU7XG4gICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWNvbnRhaW5lciAucHJpb3JpdHktbGV2ZWwnKS52YWx1ZTtcbiAgICBET00uYWRkVGFzayhpbmRleCwgdGFza1RpdGxlLCBkdWVEYXRlLCBmYWxzZSwgcHJpb3JpdHksIHRydWUsICcnKTtcbiAgICBET00uaGlkZUVsZW1lbnQoJy5wb3B1cC1jb250YWluZXInKTtcbiAgICBET00uaGlkZUVsZW1lbnQoJy5uZXdUYXNrRW50cnknKTtcbiAgICAvLyB1cGRhdGVQcm9qZWN0U3RvcmFnZURhdGEoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG59XG5cbmNvbnN0IGVucm9sbFRhc2tCdG5FdmVudCA9ICgpID0+IHtcbiAgICBsZXQgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1hZGRUYXNrLWJ0bicpO1xuICAgIGFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbnJvbGxUYXNrKTtcbn1cblxuY29uc3QgcmVuZGVyUHJvamVjdHMgPSAoKSA9PiB7XG4gICAgbGV0IGxpc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1saXN0Jyk7XG4gICAgbGV0IHByb2plY3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpO1xuICAgIHdoaWxlKGxpc3RDb250YWluZXIuZmlyc3RDaGlsZCl7XG4gICAgICAgIGxpc3RDb250YWluZXIucmVtb3ZlQ2hpbGQobGlzdENvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgd2hpbGUocHJvamVjdENvbnRhaW5lci5maXJzdENoaWxkKXtcbiAgICAgICAgcHJvamVjdENvbnRhaW5lci5yZW1vdmVDaGlsZChwcm9qZWN0Q29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIGZvciAobGV0IGluZGV4IGluIHByb2plY3RzKSB7XG4gICAgICAgIERPTS5hZGRQcm9qZWN0KHByb2plY3RzW2luZGV4XS50aXRsZSwgcHJvamVjdHNbaW5kZXhdLmRlc2NyaXB0aW9uLCBmYWxzZSwgaW5kZXgpO1xuICAgICAgICBmb3IgKGxldCB0YXNrSW5kZXggaW4gcHJvamVjdHNbaW5kZXhdLnRvZG9MaXN0KSB7XG4gICAgICAgICAgICBET00uYWRkVGFzayhcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBwcm9qZWN0c1tpbmRleF0udG9kb0xpc3RbdGFza0luZGV4XS5uYW1lLFxuICAgICAgICAgICAgICAgIHByb2plY3RzW2luZGV4XS50b2RvTGlzdFt0YXNrSW5kZXhdLmR1ZURhdGUsXG4gICAgICAgICAgICAgICAgcHJvamVjdHNbaW5kZXhdLnRvZG9MaXN0W3Rhc2tJbmRleF0uY29tcGxldGUsXG4gICAgICAgICAgICAgICAgcHJvamVjdHNbaW5kZXhdLnRvZG9MaXN0W3Rhc2tJbmRleF0ucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdGFza0luZGV4XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkRGVsUHJvakV2ZW50KCk7XG4gICAgYWRkVGFza0J0bkV2ZW50KCk7XG59XG5cbmNvbnN0IGRlbGV0ZVByb2pTZXF1ZW5jZSA9IChkZWxCdG4pID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XG4gICAgbGV0IHByb2plY3RJbmRleCA9IGRlbEJ0bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdEluZGV4Jyk7XG4gICAgZGVsZXRlUHJvamVjdChwcm9qZWN0SW5kZXgpO1xuICAgIHNhdmVUb0xvY2FsKCk7XG4gICAgZW5yb2xsQnRuRXZlbnQoKTsgICAgIFxufVxuXG5jb25zdCBhZGREZWxQcm9qRXZlbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZGVsQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2otZGVsLWJ0bicpO1xuICAgIGZvciAobGV0IGRlbEJ0biBvZiBBcnJheS5mcm9tKGRlbEJ1dHRvbnMpKSB7XG4gICAgICAgIC8vYmluZCBzaG91bGQgYmUgdXNlZCB3aGVuIHBhc3NpbmcgYXJndW1lbnRzIGluIGEgY2FsbGJhY2tcbiAgICAgICAgbGV0IGRlbGV0ZVByb2pTZXF1ZW5jZVBzdWVkbyA9IGRlbGV0ZVByb2pTZXF1ZW5jZS5iaW5kKG51bGwsIGRlbEJ0bik7XG4gICAgICAgIGRlbEJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGRlbGV0ZVByb2pTZXF1ZW5jZVBzdWVkbyk7XG4gICAgICAgIGRlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRlbGV0ZVByb2pTZXF1ZW5jZVBzdWVkbyk7XG4gICAgfTtcbn1cblxuY29uc3QgdXBkYXRlVGltZVJlbWFpbmluZyA9IChwcm9qSW5kZXgsIHRhc2tJbmRleCkgPT4ge1xuICAgIGxldCBkdWVEYXRlID0gRE9NLnFTKGAucHJvamVjdC1jb250YWluZXJbZGF0YS1wcm9qZWN0SW5kZXg9XCIke3Byb2pJbmRleH1cIl0gLnRhc2stY29udGFpbmVyW2RhdGEtdGFza0luZGV4PVwiJHt0YXNrSW5kZXh9XCJdIC5kdWUtZGF0ZWApLnZhbHVlO1xuICAgIGxldCByZW1haW5pbmcgPSBmb3JtYXREaXN0YW5jZVRvTm93KHBhcnNlSVNPKGR1ZURhdGUpLCB7IGFkZFN1ZmZpeDogdHJ1ZSB9KTtcbiAgICBET00ucVMoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnJlbWFpbmluZ2ApLnRleHRDb250ZW50ID0gcmVtYWluaW5nO1xufVxuXG5jb25zdCB0b2dnbGVEYXRlUGlja2VyID0gKHByb2pJbmRleCwgdGFza0luZGV4LCBoaWRlKSA9PiB7XG4gICAgbGV0IGRhdGVQaWNrZXIgPSAoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLmR1ZS1kYXRlYCk7XG4gICAgbGV0IHRpbWVSZW1haW5pbmcgPSAoYC5wcm9qZWN0LWNvbnRhaW5lcltkYXRhLXByb2plY3RJbmRleD1cIiR7cHJvakluZGV4fVwiXSAudGFzay1jb250YWluZXJbZGF0YS10YXNrSW5kZXg9XCIke3Rhc2tJbmRleH1cIl0gLnJlbWFpbmluZ2ApO1xuICAgIGlmIChoaWRlID09PSB0cnVlKSB7XG4gICAgICAgIERPTS5zaG93RWxlbWVudCh0aW1lUmVtYWluaW5nKTtcbiAgICAgICAgRE9NLmhpZGVFbGVtZW50KGRhdGVQaWNrZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgRE9NLnNob3dFbGVtZW50KGRhdGVQaWNrZXIpO1xuICAgICAgICBET00uaGlkZUVsZW1lbnQodGltZVJlbWFpbmluZylcbiAgICB9XG59XG5cbmNvbnN0IGhpZGVBbGxEYXRlUGlja2VyID0gKCkgPT4ge1xuICAgIGNvbnN0IGFsbERhdGVQaWNrZXIgPSBET00ucVNBKCcuZHVlLWRhdGUnKTtcbiAgICBhbGxEYXRlUGlja2VyLmZvckVhY2gocGlja2VyID0+IHtcbiAgICAgICBET00uYWRkQXR0cmlidXRlKHBpY2tlciwgJ2NsYXNzJywgJ2hpZGRlbicpO1xuICAgIH0pXG59XG5cbmV4cG9ydCB7IGFkZEJ0bkV2ZW50LCBjYW5jZWxCdG5FdmVudCwgZW5yb2xsQnRuRXZlbnQsIHJlbmRlclByb2plY3RzLCBhZGREZWxQcm9qRXZlbnQsXG4gICAgYWRkVGFza0J0bkV2ZW50LCBjYW5jZWxUYXNrQnRuRXZlbnQsIGVucm9sbFRhc2tCdG5FdmVudCwgZGVsZXRlVGFza0J0bkV2ZW50LCByZW5kZXJUYXNrcywgdXBkYXRlVGltZVJlbWFpbmluZyxcbiAgICBoaWRlQWxsRGF0ZVBpY2tlclxuIH1cblxuLy8gTkVYVCBTVEVQUzpcbi8vIHRhc2sgZGVsZXRlIGJ1dHRvbiAtIERvbmVcbi8vIHByb2plY3QgaW5mbyBlZGl0IC0gZG9uZVxuLy8gdGFzayBlZGl0IC0gRG9uZVxuLy8gZGF0ZSBwaWNrZXIgLSBEb25lXG4vLyB1cGRhdGUgdGFzayBkYXRhIC0gRG9uZVxuLy8gc2V0IHRoZSBkcm9wIGRvd24gb3B0aW9uIG9mIHByaW9yaXR5IHRvIGFjdHVhbCB2YWx1ZSAtIERvbmVcbi8vIHJldmVydCB0byBwcmV2aW91cyB2YWx1ZSB3aGVuIGVkaXQgdGFzayBpcyBjYW5jZWxlZCAtIGJ1ZyBvbiBwcmlvcml0eSB2YWx1ZSEgLSBEb25lXG4vLyBleGNsdWRlIHN0YXR1cyBjaGVja2JveCBmcm9tIGJlaW5nIGxvY2tlZCAtIERvbmVcblxuLy8gYWRkIGV2ZW50IGxpc3RlbmVyIG9uIGNoZWNrYm94IHRvIHVwZGF0ZSBwcm9qZWN0cyBvYmplY3QgLSB0YXNrIHN0YXR1cyAtIERvbmVcbi8vIGluc3RlYWQgb2YgZGlzcGxheWluZyB0aGUgZGF0ZSwgc2hvdyBob3cgdGhlIHRpbWUgbGVmdCAtIEFkZGVkXG4vLyB3cml0ZSBkYXRhIHRvIGJyb3dzZXIncyBsb2NhbCBzdG9yYWdlIC0gRG9uZVxuLy8gZGVsZXRlIHByb2plY3QgYnVnLCBkZWxldGVzIHR3byBwcm9qZWN0cyBvbiAxIGNsaWNrIC0gZml4ZWRcbi8vIHN0eWxpemUgdGhlIG92ZXJhbGwgbG9vayIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuaW1wb3J0IHsgY3JlYXRlUHJvamVjdCB9IGZyb20gJy4vZGF0YS1zdHJ1Y3R1cmUnO1xuaW1wb3J0IHsgYWRkVG9EbyB9IGZyb20gJy4vZGF0YS1zdHJ1Y3R1cmUnO1xuaW1wb3J0IHsgcHJvamVjdHMgfSBmcm9tICcuL2RhdGEtc3RydWN0dXJlJztcbmltcG9ydCBET00gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHtcbiAgICBhZGRCdG5FdmVudCxcbiAgICBjYW5jZWxCdG5FdmVudCxcbiAgICBlbnJvbGxCdG5FdmVudCxcbiAgICBhZGREZWxQcm9qRXZlbnQsXG4gICAgY3JlYXRlUHJvamVjdEVudHJ5UG9wdXAsXG4gICAgY3JlYXRlVGFza0VudHJ5UG9wdXAsXG4gICAgYWRkVGFza0J0bkV2ZW50LFxuICAgIGNhbmNlbFRhc2tCdG5FdmVudCxcbiAgICBlbnJvbGxUYXNrQnRuRXZlbnQsXG4gICAgZGVsZXRlVGFza0J0bkV2ZW50LFxuICAgIHJlbmRlclByb2plY3RzLFxuICAgIHJlbmRlclRhc2tzLFxuICAgIGhpZGVBbGxEYXRlUGlja2VyLFxufSBmcm9tICcuL2RvbSc7XG5cbmltcG9ydCB7IHNhdmVUb0xvY2FsLCByZWFkRnJvbUxvY2FsIH0gZnJvbSAnLi4vZGlzdC9sb2NhbC1zdG9yYWdlJztcblxuLy8gbGV0IHByb2oxID0gY3JlYXRlUHJvamVjdCgnUHJvamVjdCAxJywgJ0p1c3QgdGVzdGluZyBteSBjb2Rlcy4nKTtcbi8vIGFkZFRvRG8ocHJvajEsJzFzdCBUYXNrJywgJzAzLTMwLTIwMjInLGZhbHNlLCdsb3cnKTtcbi8vIGFkZFRvRG8ocHJvajEsJzJuZCBUYXNrJywgJzAzLTI5LTIwMjInLHRydWUsJ2hpZ2gnKTtcbi8vIHByb2oxLnRvZG9MaXN0LnNwbGljZSgwLDEpO1xuXG5jcmVhdGVQcm9qZWN0RW50cnlQb3B1cCgpO1xuY3JlYXRlVGFza0VudHJ5UG9wdXAoKTtcblxuLy8gbGV0IHByb2plY3RUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXctcHJvamVjdC1pbnB1dCcpO1xuLy8gbGV0IHByb2plY3REZXNjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1wcm9qZWN0LWRlc2MtaW5wdXQnKTtcbi8vIERPTS5hZGRBdHRyaWJ1dGUocHJvamVjdFRpdGxlLCAnbmFtZScsICdwcm9qZWN0LW5hbWUnKTtcbi8vIERPTS5hZGRBdHRyaWJ1dGUocHJvamVjdERlc2MsICduYW1lJywgJ3Byb2plY3QtZGVzYycpO1xuXG4vLyBET00uYWRkUHJvamVjdCgnUHJvamVjdCBOdW1iYWggMScsICdCbGFoIGJsYWggYmxhaCBkZXNjcmlwdGlvbiAxJywgdHJ1ZSwgJycpO1xuLy8gRE9NLmFkZFByb2plY3QoJ1Byb2plY3QgTnVtYmFoIDInLCAnQmxhaCBibGFoIGJsYWggZGVzY3JpcHRpb24gMicsIHRydWUsICcnKTtcbi8vIERPTS5hZGRQcm9qZWN0KCdQcm9qZWN0IE51bWJhaCAzJywgJ0JsYWggYmxhaCBibGFoIGRlc2NyaXB0aW9uIDMnLCB0cnVlLCAnJyk7XG5cbi8vIC8vIHByb2plY3RzWzBdLmFkZFRvRG8oJzFzdCBUYXNrJywgJzAzLTMwLTIwMjInLGZhbHNlLCdsb3cnKTtcbi8vIC8vIHByb2plY3RzWzBdLmFkZFRvRG8oJzJuZCBUYXNrJywgJzAzLTMwLTIwMjMnLGZhbHNlLCdsb3cnKTtcbi8vIC8vIHByb2plY3RzWzBdLnJlbW92ZVRhc2soMCk7XG5cbi8vIERPTS5hZGRUYXNrKDAsJ1VuYW5nIFRhc2snLCAnMjAyMi0wNS0zMCcsIHRydWUsICdsb3cnLCB0cnVlLCAnJyk7XG4vLyBET00uYWRkVGFzaygwLCdQYW5nYWxhd2FuZyBUYXNrJywgJzIwMjItMDQtMjUnLCBmYWxzZSwgJ21lZGl1bScsIHRydWUsICcnKTtcbi8vIERPTS5hZGRUYXNrKDEsJ0ltcG9ydGFudGUnLCAnMjAyMi0wNi0xNScsIGZhbHNlLCAnaGlnaCcsIHRydWUsICcnKTtcbi8vIERPTS5hZGRUYXNrKDIsJ1Rhc2sgbmcgM3JkIFByb2plY3QnLCAnMjAyMi0wNi0yNicsICd0cnVlJywgJ2xvdycsIHRydWUsICcnKTtcblxuLy8gY29uc29sZS5sb2cocHJvamVjdHMpO1xuXG4vLyBjb25zdCB0b21vcnJvdyA9IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgKDI0ICogNjAgKiA2MCAqIDEwMDApKTtcbmNvbnN0IGxvY2FsdGltZSA9IG5ldyBEYXRlKCk7XG5sZXQgZGF5ID0gbG9jYWx0aW1lLmdldERhdGUoKSsxO1xubGV0IG1vbnRoID0gbG9jYWx0aW1lLmdldE1vbnRoKCkgKyAxO1xubGV0IHllYXIgPSBsb2NhbHRpbWUuZ2V0RnVsbFllYXIoKTtcbmlmIChtb250aCA8IDEwKSBtb250aCA9IFwiMFwiICsgbW9udGg7XG5pZiAoZGF5IDwgMTApIGRheSA9IFwiMFwiICsgZGF5O1xuY29uc3QgdG9tb3Jyb3cgPSAgeWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRheTsgLy9odG1sIG9ubHkgYWNjZXB0cyB0aGlzIGRhdGUgZm9ybWF0XG5cbmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnUHJvamVjdHNEYXRhJykgIT09IG51bGwpe1xuICAgIHJlYWRGcm9tTG9jYWwoKTtcbiAgICBmb3IgKGxldCBpPTA7IGk8cHJvamVjdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBET00uYWRkUHJvamVjdChwcm9qZWN0c1tpXS50aXRsZSwgcHJvamVjdHNbaV0uZGVzY3JpcHRpb24sIGZhbHNlLCBpKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2cocHJvamVjdHNbaV0udG9kb0xpc3QubGVuZ3RoKTtcbiAgICAgICAgaWYgKHByb2plY3RzW2ldLnRvZG9MaXN0Lmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICBET00uYWRkVGFzayhpLCdEZWZhdWx0IDFzdCBUYXNrJywgdG9tb3Jyb3csIGZhbHNlLCAnbG93JywgdHJ1ZSwgMCk7XG4gICAgICAgICAgICBzYXZlVG9Mb2NhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHByb2plY3RzW2ldLnRvZG9MaXN0Lmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICByZW5kZXJUYXNrcyhpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufSBlbHNlIHtcbiAgICBET00uYWRkUHJvamVjdCgnRGVmYXVsdCBQcm9qZWN0JywgJ0Rlc2NyaXB0aW9uIGZvciBEZWZhdWx0IFByb2plY3QnLCB0cnVlLCAnJyk7XG5cbiAgICBET00uYWRkVGFzaygwLCdEZWZhdWx0IDFzdCBUYXNrJywgdG9tb3Jyb3csIGZhbHNlLCAnbG93JywgdHJ1ZSwgJycpO1xuICAgIERPTS5hZGRUYXNrKDAsJ0RlZmF1bHQgMm5kIFRhc2snLCB0b21vcnJvdywgZmFsc2UsICdtZWRpdW0nLCB0cnVlLCAnJyk7XG5cbiAgICBzYXZlVG9Mb2NhbCgpO1xufVxuXG4vLyBoaWRlQWxsRGF0ZVBpY2tlcigpO1xuYWRkQnRuRXZlbnQoKTtcbmNhbmNlbEJ0bkV2ZW50KCk7XG5lbnJvbGxCdG5FdmVudCgpO1xuY2FuY2VsVGFza0J0bkV2ZW50KCk7XG5lbnJvbGxUYXNrQnRuRXZlbnQoKTtcbi8vIGRlbGV0ZVRhc2tCdG5FdmVudCgpO1xuLy8gYWRkRGVsUHJvakV2ZW50KCk7XG4vLyBhZGRUYXNrQnRuRXZlbnQoKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDgyOCk7XG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXygyMDkpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2OSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJzYXZlVG9Mb2NhbCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZWFkRnJvbUxvY2FsIiwidG9Eb0xpc3QiLCJnZXRJdGVtIiwiZGVzZXJpYWxpemVkIiwicGFyc2UiLCJwcm9qZWN0RW5yb2xsZXIiLCJmcm9tSlNPTiIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJqIiwidG9kb0xpc3QiLCJhZGRUb0RvIiwibmFtZSIsImR1ZURhdGUiLCJjb21wbGV0ZSIsInByaW9yaXR5IiwicHJvamVjdHMiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJUb0RvIiwiY3JlYXRlUHJvamVjdCIsIm5ld1Byb2plY3QiLCJ1cGRhdGVQcm9qZWN0c0FycmF5IiwicHJvdG90eXBlIiwic3RhdHVzIiwidG9EbyIsInJlbW92ZVRhc2siLCJ0YXNrX2luZGV4IiwiZGVsZXRlUHJvamVjdCIsInByb2plY3RJbmRleCIsImRlbGV0ZVRhc2siLCJ0YXNrSW5kZXgiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsImNhbGwiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJjb21wYXJlQXNjIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJkaWZmIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMiLCJ5ZWFyRGlmZiIsImdldEZ1bGxZZWFyIiwibW9udGhEaWZmIiwiZ2V0TW9udGgiLCJlbmRPZkRheSIsImRpcnR5RGF0ZSIsImRhdGUiLCJzZXRIb3VycyIsImVuZE9mTW9udGgiLCJtb250aCIsInNldEZ1bGxZZWFyIiwiaXNMYXN0RGF5T2ZNb250aCIsImRpZmZlcmVuY2VJbk1vbnRocyIsInNpZ24iLCJkaWZmZXJlbmNlIiwiTWF0aCIsImFicyIsImdldERhdGUiLCJzZXREYXRlIiwic2V0TW9udGgiLCJpc0xhc3RNb250aE5vdEZ1bGwiLCJOdW1iZXIiLCJkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMiLCJyb3VuZGluZ01hcCIsImNlaWwiLCJyb3VuZCIsImZsb29yIiwidHJ1bmMiLCJ2YWx1ZSIsImdldFJvdW5kaW5nTWV0aG9kIiwibWV0aG9kIiwiZGlmZmVyZW5jZUluU2Vjb25kcyIsInJvdW5kaW5nTWV0aG9kIiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwid2lkdGgiLCJTdHJpbmciLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXQiLCJmb3JtYXRzIiwiZm9ybWF0TG9uZyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsImRpcnR5T3B0aW9ucyIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsImZpbmRJbmRleCIsInBhdHRlcm4iLCJ0ZXN0IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwic2xpY2UiLCJvYmplY3QiLCJwcmVkaWNhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsImFycmF5IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW4iLCJ0b2tlblZhbHVlIiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJjbG9uZU9iamVjdCIsImRpcnR5T2JqZWN0IiwicHJvcGVydHkiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsIk1JTlVURVNfSU5fREFZIiwiTUlOVVRFU19JTl9NT05USCIsImRpcnR5QmFzZURhdGUiLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiaXNOYU4iLCJsb2NhbGl6ZU9wdGlvbnMiLCJCb29sZWFuIiwibW9udGhzIiwic2Vjb25kcyIsIm9mZnNldEluU2Vjb25kcyIsIm1pbnV0ZXMiLCJpbmNsdWRlU2Vjb25kcyIsImhvdXJzIiwiZGF5cyIsIm5lYXJlc3RNb250aCIsIm1vbnRoc1NpbmNlU3RhcnRPZlllYXIiLCJ5ZWFycyIsImZvcm1hdERpc3RhbmNlVG9Ob3ciLCJub3ciLCJwb3ciLCJtaWxsaXNlY29uZHNJbkhvdXIiLCJ0b0ludGVnZXIiLCJwYXJzZUlTTyIsImFkZGl0aW9uYWxEaWdpdHMiLCJkYXRlU3RyaW5ncyIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInBhcnNlWWVhciIsInBhcnNlRGF0ZSIsInJlc3REYXRlU3RyaW5nIiwieWVhciIsIm9mZnNldCIsInRpbWVzdGFtcCIsInBhcnNlVGltZSIsInRpbWV6b25lIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicGFyc2VUaW1lem9uZSIsInBhdHRlcm5zIiwiZGF0ZVRpbWVEZWxpbWl0ZXIiLCJ0aW1lWm9uZURlbGltaXRlciIsImRhdGVSZWdleCIsInRpbWVSZWdleCIsInRpbWV6b25lUmVnZXgiLCJkYXRlU3RyaW5nIiwidGltZVN0cmluZyIsInNwbGl0Iiwic3Vic3RyIiwiZXhlYyIsInJlZ2V4IiwiUmVnRXhwIiwiY2FwdHVyZXMiLCJjZW50dXJ5IiwiaXNXZWVrRGF0ZSIsImRheU9mWWVhciIsInBhcnNlRGF0ZVVuaXQiLCJ3ZWVrIiwiZGF5T2ZXZWVrIiwiX3llYXIiLCJ2YWxpZGF0ZVdlZWtEYXRlIiwiaXNvV2Vla1llYXIiLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwiZGF5T2ZJU09XZWVrWWVhciIsImRheXNJbk1vbnRocyIsImlzTGVhcFllYXJJbmRleCIsInZhbGlkYXRlRGF0ZSIsInZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSIsIm1heCIsInBhcnNlVGltZVVuaXQiLCJ2YWxpZGF0ZVRpbWUiLCJwYXJzZUZsb2F0IiwidGltZXpvbmVTdHJpbmciLCJfaG91cnMiLCJ2YWxpZGF0ZVRpbWV6b25lIiwiRE9NIiwicVMiLCJzZWxlY3RvciIsInFTQSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ1cGRhdGVQcm9qZWN0cyIsInByb2plY3ROYW1lIiwicHJvamVjdERlc2MiLCJ1cGRhdGVUYXNrIiwicHJvakluZGV4IiwidGFza25hbWUiLCJyZW1haW5pbmciLCJsb3dfcHJpb3JpdHkiLCJtZWRfcHJpb3JpdHkiLCJoaWdoX3ByaW9yaXR5IiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkQXR0cmlidXRlIiwidGltZUxlZnQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZU5vZGUiLCJ0eXBlIiwicGFyZW50IiwiY2xhc3NOYW1lIiwiYXR0cmlidXRlIiwibm9kZSIsImNsYXNzTGlzdCIsImFkZCIsImFkZFByb2plY3RMaXN0Q2xpY2tFdmVudCIsInRvZ2dsZVRhc2tzQ29udGFpbmVyVmlzaWJpbGl0eSIsImNoZWNrZWQiLCJhdHRyaWJ1dGVWYWx1ZSIsInByb2plY3ROb2RlIiwiYWxsUHJvamVjdHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZnJvbSIsImdldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRDbGFzcyIsImNsYXNzU2VsZWN0b3IiLCJuZXdDbGFzc05hbWUiLCJhZGRQcm9qZWN0IiwidXBkYXRlUHJvakFycmF5IiwicHJvamVjdENvbnRhaW5lciIsInByb2plY3RJbmZvIiwicHJvamVjdERlc2NyaXB0aW9uIiwiZGVsUHJvakJ0biIsImVkaXRQcm9qQnRuIiwicHJvakluZm9zIiwiZGVsZXRlUHJvalNlcXVlbmNlIiwiZm9yRWFjaCIsInNldERlbFByb2pCdG5MaXN0ZW5lciIsInRhc2tFbnRyeURpdiIsImhpZGVFbGVtZW50Iiwic2hvd0VsZW1lbnQiLCJzZXRBZGRUYXNrQnRuTGlzdGVuZXIiLCJkZWxldGVQcm9qQnRuIiwicmVuZGVyUHJvamVjdHMiLCJzZXRFZGl0UHJvakJ0bkxpc3RlbmVyIiwiYWRkVGFzayIsInByb2plY3RfaW5kZXgiLCJ1cGRhdGVUb2RvQXJyYXkiLCJ0YXNrRWxlbWVudHNQYXJlbnQiLCJjaGVja2JveCIsImNoZWNrYm94TGFiZWwiLCJ0YXNrRGVzY3JpcHRpb24iLCJkdWVEYXRlTm9kZSIsInRhc2tPcHRpb25zIiwidGFza1BhcmVudFNlbGVjdCIsImxvd1ByaW9yaXR5IiwibWVkUHJpb3JpdHkiLCJoaWdoUHJpb3JpdHkiLCJkZWxUYXNrQnRuIiwiZGVsZXRlVGFza0J0blNlcXVlbmNlUHNldWRvIiwiZGVsZXRlVGFza0J0blNlcXVlbmNlIiwiYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlZGl0VGFza0J0biIsImRlbGV0ZVRhc2tCdG4iLCJ0YXNrRGF0YSIsInRvZ2dsZURhdGVQaWNrZXIiLCJ1cGRhdGVUaW1lUmVtYWluaW5nIiwic2V0RWRpdFRhc2tCdG5MaXN0ZW5lciIsInNldFN0YXR1c0NoZWNrYm94TGlzdGVuZXIiLCJyZXN0b3JlVGFza3MiLCJjcmVhdGVQcm9qZWN0RW50cnlQb3B1cCIsImNyZWF0ZVRhc2tFbnRyeVBvcHVwIiwiZHVlRGF0ZUlucHV0IiwibG9jYWx0aW1lIiwiYWRkQnRuRXZlbnQiLCJjYW5jZWxCdG5FdmVudCIsImNhbmNlbFRhc2tCdG5FdmVudCIsImJ0biIsInBhcmVudEVsZW1lbnQiLCJyZW5kZXJUYXNrcyIsInRhc2tDb250YWluZXIiLCJlbnJvbGxQcm9qZWN0IiwicHJvamVjdFRpdGxlIiwiZW5yb2xsQnRuRXZlbnQiLCJlbnJvbGxCdG4iLCJlbnJvbGxUYXNrIiwidGFza1RpdGxlIiwiZW5yb2xsVGFza0J0bkV2ZW50IiwibGlzdENvbnRhaW5lciIsImJ0bnMiLCJhZGRUYXNrQnRuRXZlbnQiLCJkZWxCdG4iLCJoaWRlIiwiZGF0ZVBpY2tlciIsInRpbWVSZW1haW5pbmciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCJdLCJzb3VyY2VSb290IjoiIn0=